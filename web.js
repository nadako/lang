// Generated by Haxe 3.3.0 (git build development @ 73f2982)
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) if(f(x.next())) {
		return true;
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) if(!f(x.next())) {
		return false;
	}
	return true;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var Type = function() { };
Type.__name__ = true;
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
var Web = $hx_exports["Web"] = function() { };
Web.__name__ = true;
Web.main = function(editor) {
	var model = editor.getModel();
	var compile = function() {
		var firstFun = null;
		var typer = new toylang_Typer();
		var success;
		try {
			var decls = new toylang_Parser(model.getValue(),"code",["code"]).parse();
			var typed = [];
			var _g = 0;
			while(_g < decls.length) {
				var decl = decls[_g];
				++_g;
				var typedDecl = typer.typeSyntaxDecl(decl);
				typed.push(typedDecl);
				if(firstFun == null) {
					if(typedDecl[1] == 0) {
						var fun = typedDecl[2];
						if(fun.cfg != null) {
							firstFun = fun;
						}
					}
				}
			}
			var code = new toylang_GenJs().generate(typed);
			Web.result.innerText = code;
			Web.error.innerText = "";
			success = true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			Web.error.innerText = "ERROR: " + e;
			Web.result.innerText = "";
			success = false;
		}
		if(!success || firstFun == null) {
			if(Web.network != null) {
				Web.network.destroy();
				Web.network = null;
			}
			return;
		}
		var data = toylang_DebugUtils.makeVisJsGraph(firstFun.cfg);
		console.log(data);
		var data1 = { nodes : new vis.DataSet(data.nodes), edges : new vis.DataSet(data.edges)};
		if(Web.network != null) {
			Web.network.setData(data1);
		} else {
			Web.network = new vis.Network(Web.cfg,data1,{ layout : { hierarchical : { enabled : true, sortMethod : "directed"}}, edges : { smooth : { type : "continuous"}}, physics : { enabled : false}});
		}
	};
	model.onDidChangeContent(compile);
	compile();
};
var byte__$ByteData_ByteData_$Impl_$ = {};
byte__$ByteData_ByteData_$Impl_$.__name__ = true;
byte__$ByteData_ByteData_$Impl_$.get_length = function(this1) {
	return this1.length;
};
byte__$ByteData_ByteData_$Impl_$.readByte = function(this1,i) {
	return this1.b[i];
};
byte__$ByteData_ByteData_$Impl_$._new = function(data) {
	return data;
};
byte__$ByteData_ByteData_$Impl_$.ofString = function(s) {
	return haxe_io_Bytes.ofString(s);
};
byte__$ByteData_ByteData_$Impl_$.ofBytes = function(b) {
	return b;
};
byte__$ByteData_ByteData_$Impl_$.readString = function(this1,pos,len) {
	return this1.getString(pos,len);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null?0:l._height;
		var hr = r == null?0:r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null?0:_this._height) >= (_this1 == null?0:_this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null?0:_this2._height) > (_this3 == null?0:_this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null?0:_this._height) > (_this1 == null?0:_this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = true;
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = true;
haxe_ds_GenericStack.prototype = {
	iterator: function() {
		var l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.elt;
		}};
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var hxparse_ParserError = function(pos) {
	this.pos = pos;
};
hxparse_ParserError.__name__ = true;
hxparse_ParserError.prototype = {
	toString: function() {
		return "Parser error";
	}
	,__class__: hxparse_ParserError
};
var hxparse_NoMatch = function(pos,token) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
hxparse_NoMatch.__name__ = true;
hxparse_NoMatch.__super__ = hxparse_ParserError;
hxparse_NoMatch.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return "No match: " + Std.string(this.token);
	}
	,__class__: hxparse_NoMatch
});
var hxparse_Parser = function(stream) {
	this.stream = stream;
};
hxparse_Parser.__name__ = true;
hxparse_Parser.prototype = {
	peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,junk: function() {
		this.last = this.token.elt;
		this.token = this.token.next;
	}
	,curPos: function() {
		return this.stream.curPos();
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
					break;
				} else throw(e);
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,parseOptional: function(f) {
		try {
			return f();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
				return null;
			} else throw(e);
		}
	}
	,parseRepeat: function(f) {
		var acc = [];
		while(true) try {
			acc.push(f());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
				return acc;
			} else throw(e);
		}
	}
	,parseExpect: function(f) {
		try {
			return f();
		} catch( _ ) {
			if (_ instanceof js__$Boot_HaxeError) _ = _.val;
			if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else throw(_);
		}
	}
	,noMatch: function() {
		return new hxparse_NoMatch(this.stream.curPos(),this.peek(0));
	}
	,unexpected: function() {
		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
	}
	,__class__: hxparse_Parser
};
var hxparse_ParserBuilder = function() { };
hxparse_ParserBuilder.__name__ = true;
var hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token = function(stream) {
	this.stream = stream;
};
hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token.__name__ = true;
hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token.prototype = {
	peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,junk: function() {
		this.last = this.token.elt;
		this.token = this.token.next;
	}
	,curPos: function() {
		return this.stream.curPos();
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
					break;
				} else throw(e);
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,parseOptional: function(f) {
		try {
			return f();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
				return null;
			} else throw(e);
		}
	}
	,parseRepeat: function(f) {
		var acc = [];
		while(true) try {
			acc.push(f());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
				return acc;
			} else throw(e);
		}
	}
	,parseExpect: function(f) {
		try {
			return f();
		} catch( _ ) {
			if (_ instanceof js__$Boot_HaxeError) _ = _.val;
			if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			} else throw(_);
		}
	}
	,noMatch: function() {
		return new hxparse_NoMatch(this.stream.curPos(),this.peek(0));
	}
	,unexpected: function() {
		throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
	}
	,__class__: hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token
};
var hxparse_Position = function(source,min,max) {
	this.psource = source;
	this.pmin = min;
	this.pmax = max;
};
hxparse_Position.__name__ = true;
hxparse_Position.union = function(p1,p2) {
	return new hxparse_Position(p1.psource,p1.pmin < p2.pmin?p1.pmin:p2.pmin,p1.pmax > p2.pmax?p1.pmax:p2.pmax);
};
hxparse_Position.prototype = {
	toString: function() {
		return "" + this.psource + ":characters " + this.pmin + "-" + this.pmax;
	}
	,getLinePosition: function(input) {
		var lineMin = 1;
		var lineMax = 1;
		var posMin = 0;
		var posMax = 0;
		var cur = 0;
		while(cur < this.pmin) {
			if(input.b[cur] == 10) {
				++lineMin;
				posMin = cur + 1;
			}
			++cur;
		}
		lineMax = lineMin;
		posMax = posMin;
		posMin = cur - posMin;
		while(cur < this.pmax) {
			if(input.b[cur] == 10) {
				++lineMax;
				posMax = cur + 1;
			}
			++cur;
		}
		posMax = cur - posMax;
		return { lineMin : lineMin, lineMax : lineMax, posMin : posMin, posMax : posMax};
	}
	,format: function(input) {
		var linePos = this.getLinePosition(input);
		if(linePos.lineMin != linePos.lineMax) {
			return "" + this.psource + ":lines " + linePos.lineMin + "-" + linePos.lineMax;
		} else {
			return "" + this.psource + ":" + linePos.lineMin + ": characters " + linePos.posMin + "-" + linePos.posMax;
		}
	}
	,__class__: hxparse_Position
};
var hxparse_Unexpected = function(token,pos) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
hxparse_Unexpected.__name__ = true;
hxparse_Unexpected.__super__ = hxparse_ParserError;
hxparse_Unexpected.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return "Unexpected " + Std.string(this.token);
	}
	,__class__: hxparse_Unexpected
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class?o.__name__ != null:false) {
			return true;
		}
		if(cl == Enum?o.__ename__ != null:false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var toylang_BasicBlock = function() {
	this.id = toylang_BasicBlock.nextId++;
	this.elements = [];
	this.edges = [];
	this.syntaxEdge = toylang_SyntaxEdge.SENone;
};
toylang_BasicBlock.__name__ = true;
toylang_BasicBlock.prototype = {
	addElement: function(e) {
		this.elements.push(e);
	}
	,addEdge: function(to,label) {
		this.edges.push(new toylang_Edge(to,label));
	}
	,__class__: toylang_BasicBlock
};
var toylang_UnreachableBlock = function() {
	toylang_BasicBlock.call(this);
};
toylang_UnreachableBlock.__name__ = true;
toylang_UnreachableBlock.__super__ = toylang_BasicBlock;
toylang_UnreachableBlock.prototype = $extend(toylang_BasicBlock.prototype,{
	addEdge: function(_,_1) {
	}
	,__class__: toylang_UnreachableBlock
});
var toylang_Binop = { __ename__ : true, __constructs__ : ["OpEq","OpNotEq","OpAdd","OpSub","OpDiv","OpMul","OpGt","OpGte","OpLt","OpLte","OpBoolAnd","OpBoolOr"] };
toylang_Binop.OpEq = ["OpEq",0];
toylang_Binop.OpEq.toString = $estr;
toylang_Binop.OpEq.__enum__ = toylang_Binop;
toylang_Binop.OpNotEq = ["OpNotEq",1];
toylang_Binop.OpNotEq.toString = $estr;
toylang_Binop.OpNotEq.__enum__ = toylang_Binop;
toylang_Binop.OpAdd = ["OpAdd",2];
toylang_Binop.OpAdd.toString = $estr;
toylang_Binop.OpAdd.__enum__ = toylang_Binop;
toylang_Binop.OpSub = ["OpSub",3];
toylang_Binop.OpSub.toString = $estr;
toylang_Binop.OpSub.__enum__ = toylang_Binop;
toylang_Binop.OpDiv = ["OpDiv",4];
toylang_Binop.OpDiv.toString = $estr;
toylang_Binop.OpDiv.__enum__ = toylang_Binop;
toylang_Binop.OpMul = ["OpMul",5];
toylang_Binop.OpMul.toString = $estr;
toylang_Binop.OpMul.__enum__ = toylang_Binop;
toylang_Binop.OpGt = ["OpGt",6];
toylang_Binop.OpGt.toString = $estr;
toylang_Binop.OpGt.__enum__ = toylang_Binop;
toylang_Binop.OpGte = ["OpGte",7];
toylang_Binop.OpGte.toString = $estr;
toylang_Binop.OpGte.__enum__ = toylang_Binop;
toylang_Binop.OpLt = ["OpLt",8];
toylang_Binop.OpLt.toString = $estr;
toylang_Binop.OpLt.__enum__ = toylang_Binop;
toylang_Binop.OpLte = ["OpLte",9];
toylang_Binop.OpLte.toString = $estr;
toylang_Binop.OpLte.__enum__ = toylang_Binop;
toylang_Binop.OpBoolAnd = ["OpBoolAnd",10];
toylang_Binop.OpBoolAnd.toString = $estr;
toylang_Binop.OpBoolAnd.__enum__ = toylang_Binop;
toylang_Binop.OpBoolOr = ["OpBoolOr",11];
toylang_Binop.OpBoolOr.toString = $estr;
toylang_Binop.OpBoolOr.__enum__ = toylang_Binop;
toylang_Binop.__empty_constructs__ = [toylang_Binop.OpEq,toylang_Binop.OpNotEq,toylang_Binop.OpAdd,toylang_Binop.OpSub,toylang_Binop.OpDiv,toylang_Binop.OpMul,toylang_Binop.OpGt,toylang_Binop.OpGte,toylang_Binop.OpLt,toylang_Binop.OpLte,toylang_Binop.OpBoolAnd,toylang_Binop.OpBoolOr];
var toylang_DebugUtils = function() { };
toylang_DebugUtils.__name__ = true;
toylang_DebugUtils.makeDotGraph = function(root) {
	var blocks = [];
	var edges = [];
	var walk = null;
	walk = function(bb) {
		var bb1 = bb.id;
		var walk1 = JSON.stringify("<" + bb.id + ">\n" + bb.elements.map(toylang_DebugUtils.texprToString).join("\n"));
		blocks.push({ id : bb1, label : walk1});
		var _g = 0;
		var _g1 = bb.edges;
		while(_g < _g1.length) {
			var edge = [_g1[_g]];
			++_g;
			var bb2 = bb.id;
			var edge1 = edge[0].to.id;
			var walk2 = JSON.stringify(edge[0].label);
			edges.push({ from : bb2, to : edge1, label : walk2});
			var walk3 = (function(edge2) {
				return function(b) {
					return b.id == edge2[0].to.id;
				};
			})(edge);
			if(!Lambda.exists(blocks,walk3)) {
				walk(edge[0].to);
			}
		}
	};
	walk(root);
	var _g2 = [];
	var _g11 = 0;
	while(_g11 < blocks.length) {
		var b1 = blocks[_g11];
		++_g11;
		_g2.push("\t" + b1.id + " [label=" + b1.label + "];");
	}
	var blocks1 = _g2.join("\n");
	var _g12 = [];
	var _g21 = 0;
	while(_g21 < edges.length) {
		var e = edges[_g21];
		++_g21;
		_g12.push("\t" + e.from + " -> " + e.to + " [label=" + e.label + "];");
	}
	return "digraph cfg {\n" + blocks1 + "\n" + _g12.join("\n") + "\n}";
};
toylang_DebugUtils.makeVisJsGraph = function(root) {
	var blocks = [];
	var edges = [];
	var walk = null;
	walk = function(bb,level) {
		var bb1 = bb.id;
		var walk1 = "<" + bb.id + ">\n" + bb.elements.map(toylang_DebugUtils.texprToString).join("\n");
		blocks.push({ id : bb1, label : walk1, level : level});
		var _g = 0;
		var _g1 = bb.edges;
		while(_g < _g1.length) {
			var edge = [_g1[_g]];
			++_g;
			edges.push({ from : bb.id, to : edge[0].to.id, label : edge[0].label, arrows : "to"});
			var walk2 = (function(edge1) {
				return function(b) {
					return b.id == edge1[0].to.id;
				};
			})(edge);
			if(!Lambda.exists(blocks,walk2)) {
				walk(edge[0].to,level + 1);
			}
		}
	};
	walk(root,0);
	return { nodes : blocks, edges : edges};
};
toylang_DebugUtils.typeToString = function(t) {
	switch(t[1]) {
	case 0:
		var m = t[2];
		if(m.type == null) {
			return "<unknown>";
		} else {
			return toylang_DebugUtils.typeToString(m.type);
		}
		break;
	case 1:
		var c = t[2];
		return c.module.concat([c.name]).join(".");
	case 2:
		var ret = t[3];
		var args = t[2];
		var b_b = "";
		b_b = "(";
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			_g.push(toylang_DebugUtils.typeToString(a.type));
		}
		b_b = "(" + Std.string(_g.join(", "));
		b_b += ") => ";
		b_b += Std.string(toylang_DebugUtils.typeToString(ret));
		return b_b;
	case 3:
		var types = t[2];
		var b_b1 = "";
		b_b1 = "(";
		b_b1 = "(" + Std.string(types.map(toylang_DebugUtils.typeToString).join(", "));
		if(types.length == 1) {
			b_b1 += ",";
		}
		b_b1 += ")";
		return b_b1;
	case 4:
		var b_b2 = "";
		b_b2 = "CONST(";
		b_b2 = "CONST(" + Std.string(toylang_DebugUtils.typeToString(t[2]));
		b_b2 += ")";
		return b_b2;
	}
};
toylang_DebugUtils.literalToString = function(l) {
	switch(l[1]) {
	case 0:
		return "\"" + toylang_Scanner.escapeString(l[2]) + "\"";
	case 1:
		return "" + l[2];
	case 2:
		if(l[2]) {
			return "true";
		} else {
			return "false";
		}
		break;
	}
};
toylang_DebugUtils.texprToString = function(e) {
	var _g = e.kind;
	switch(_g[1]) {
	case 0:
		return "this";
	case 1:
		var values = _g[2];
		var valuesStr = values.map(toylang_DebugUtils.texprToString).join(", ");
		if(values.length == 1) {
			valuesStr += ",";
		}
		return "(" + valuesStr + ")";
	case 2:
		return "(" + toylang_DebugUtils.texprToString(_g[2]) + ")." + _g[3];
	case 3:
		var e1 = _g[3];
		var s = "var " + _g[2].name;
		if(e1 != null) {
			s += " = " + toylang_DebugUtils.texprToString(e1);
		}
		return s;
	case 4:
		return _g[2].name;
	case 5:
		var fieldName = _g[3][3].name;
		return "METHODCLOSURE<" + toylang_DebugUtils.texprToString(_g[2]) + "." + fieldName + ">";
	case 6:
		var fieldName1 = _g[3][3].name;
		return "" + toylang_DebugUtils.texprToString(_g[2]) + "." + fieldName1;
	case 7:
		return "" + toylang_DebugUtils.texprToString(_g[2]) + "(" + _g[3].map(toylang_DebugUtils.texprToString).join(", ") + ")";
	case 8:
		var fieldName2 = _g[3][3].name;
		return "" + toylang_DebugUtils.texprToString(_g[2]) + "." + fieldName2 + "(" + _g[4].map(toylang_DebugUtils.texprToString).join(", ") + ")";
	case 9:
		return toylang_DebugUtils.literalToString(_g[2]);
	case 10:
		var e2 = _g[2];
		if(e2 == null) {
			return "return";
		} else {
			return "return " + toylang_DebugUtils.texprToString(e2);
		}
		break;
	case 11:
		var ret = _g[3];
		var args = _g[2];
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < args.length) {
			var arg = args[_g11];
			++_g11;
			_g1.push(arg.name + ":" + toylang_DebugUtils.typeToString(arg.type));
		}
		return "fun(" + _g1.join(",") + "):" + toylang_DebugUtils.typeToString(ret);
	case 12:
		var e3 = _g[3];
		var target = _g[2];
		var targetStr;
		switch(target[1]) {
		case 0:
			targetStr = target[2].name;
			break;
		case 1:
			var fieldName3 = target[3][3].name;
			targetStr = toylang_DebugUtils.texprToString(target[2]) + "." + fieldName3;
			break;
		}
		return "" + targetStr + " = " + toylang_DebugUtils.texprToString(e3);
	case 13:
		var cl = _g[2];
		return "new " + cl.module.concat([cl.name]).join(".");
	case 14:
		return "" + toylang_DebugUtils.texprToString(_g[3]) + " " + toylang_Printer.printBinop(_g[2]) + " " + toylang_DebugUtils.texprToString(_g[4]);
	case 15:
		var s1 = "(" + toylang_DebugUtils.texprToString(_g[3]) + ")";
		var op = toylang_Printer.printUnop(_g[2]);
		if(_g[4]) {
			return s1 + op;
		} else {
			return op + s1;
		}
		break;
	case 16:
		throw new js__$Boot_HaxeError("basic block element expressions cannot contain " + e.kind[0]);
		break;
	}
};
var toylang_Edge = function(to,label) {
	this.to = to;
	this.label = label;
};
toylang_Edge.__name__ = true;
toylang_Edge.prototype = {
	__class__: toylang_Edge
};
var toylang_GenJs = function() {
};
toylang_GenJs.__name__ = true;
toylang_GenJs.prototype = {
	generate: function(decls) {
		this.buf = new StringBuf();
		var _g = 0;
		while(_g < decls.length) {
			var decl = decls[_g];
			++_g;
			if(decl[1] == 0) {
				this.generateFunction(decl[2]);
			}
		}
		return this.buf.b;
	}
	,generateFunction: function(fun) {
		var _gthis = this;
		if(fun.cfg == null) {
			return;
		}
		this.buf.b += "function ";
		this.buf.b += Std.string(fun.name);
		this.buf.b += "(";
		this.generateSeparated(fun.args,function(arg) {
			_gthis.buf.b += Std.string(arg.name);
		},", ");
		this.buf.b += ") {\n";
		this.generateBlock(fun.cfg,1);
		this.buf.b += "}\n\n";
	}
	,generateBlock: function(bb,level) {
		var _g = bb.syntaxEdge;
		switch(_g[1]) {
		case 0:
			var next = _g[4];
			var els = _g[3];
			var then = _g[2];
			var _g1 = 0;
			var _g2 = bb.elements.length - 1;
			while(_g1 < _g2) this.generateStatement(bb.elements[_g1++],level);
			this.generateBranch(bb.elements[bb.elements.length - 1],then,els,level);
			this.generateBlock(next,level);
			break;
		case 1:
			var next1 = _g[4];
			var def = _g[3];
			var cases = _g[2];
			var _g11 = 0;
			var _g3 = bb.elements.length - 1;
			while(_g11 < _g3) this.generateStatement(bb.elements[_g11++],level);
			this.generateSwitch(bb.elements[bb.elements.length - 1],cases,def,level);
			this.generateBlock(next1,level);
			break;
		case 2:
			var next2 = _g[4];
			var body = _g[3];
			var head = _g[2];
			var _g4 = 0;
			var _g12 = bb.elements;
			while(_g4 < _g12.length) {
				var e = _g12[_g4];
				++_g4;
				this.generateStatement(e,level);
			}
			this.generateLoop(head,body,level);
			this.generateBlock(next2,level);
			break;
		case 3:
			var _g5 = 0;
			var _g13 = bb.elements;
			while(_g5 < _g13.length) {
				var e1 = _g13[_g5];
				++_g5;
				this.generateStatement(e1,level);
			}
			break;
		}
	}
	,generateBranch: function(econd,then,els,level) {
		this.indent(level);
		this.buf.b += "if (";
		this.generateExpr(econd,level);
		this.buf.b += ") {\n";
		this.generateBlock(then,level + 1);
		this.indent(level);
		this.buf.b += "}";
		if(els != null) {
			this.buf.b += " else {\n";
			this.generateBlock(els,level + 1);
			this.indent(level);
			this.buf.b += "}\n";
		} else {
			this.buf.b += "\n";
		}
	}
	,generateSwitch: function(econd,cases,def,level) {
		this.indent(level);
		this.buf.b += "switch (";
		this.generateExpr(econd,level);
		this.buf.b += ") {\n";
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			this.indent(level + 1);
			this.buf.b += "case ";
			this.generateExpr(c.expr,level);
			this.buf.b += ":\n";
			this.generateBlock(c.body,level + 2);
			this.indent(level + 2);
			this.buf.b += "break;\n";
		}
		if(def != null) {
			this.indent(level + 1);
			this.buf.b += "default:\n";
			this.generateBlock(def,level + 2);
			this.indent(level + 2);
			this.buf.b += "break;\n";
		}
		this.indent(level);
		this.buf.b += "}\n";
	}
	,generateLoop: function(head,body,level) {
		this.indent(level);
		this.buf.b += "while (true) {\n";
		var _g1 = 0;
		var _g = head.elements.length - 1;
		while(_g1 < _g) this.generateStatement(head.elements[_g1++],level + 1);
		this.indent(level + 1);
		this.buf.b += "if (!(";
		this.generateExpr(head.elements[head.elements.length - 1],level);
		this.buf.b += ")) break;\n";
		this.generateBlock(body,level + 1);
		this.indent(level);
		this.buf.b += "}\n";
	}
	,indent: function(level) {
		var _g1 = 0;
		while(_g1 < level) {
			++_g1;
			this.buf.b += "\t";
		}
	}
	,generateStatement: function(e,level) {
		this.indent(level);
		this.generateExpr(e,level);
		this.buf.b += ";\n";
	}
	,fieldName: function(fa) {
		return fa[3].name;
	}
	,generateExpr: function(e,level) {
		var _gthis = this;
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			this.buf.b += "this";
			break;
		case 1:
			this.buf.b += "[";
			var f = $bind(this,this.generateExpr);
			var a1 = level;
			this.generateSeparated(_g[2],function(e1) {
				f(e1,a1);
			},", ");
			this.buf.b += "]";
			break;
		case 2:
			var index = _g[3];
			this.generateExpr(_g[2],level);
			this.buf.b += "[";
			this.buf.b += index == null?"null":"" + index;
			this.buf.b += "]";
			break;
		case 3:
			var evalue = _g[3];
			this.buf.b += "var ";
			this.buf.b += Std.string(_g[2].name);
			if(evalue != null) {
				this.buf.b += " = ";
				this.generateExpr(evalue,level);
			}
			break;
		case 4:
			this.buf.b += Std.string(_g[2].name);
			break;
		case 5:
			this.buf.b += "(function(o) { return o.";
			this.buf.b += Std.string(this.fieldName(_g[3]));
			this.buf.b += ".bind(o); })(";
			this.generateExpr(_g[2],level);
			this.buf.b += ")";
			break;
		case 6:
			this.generateExpr(_g[2],level);
			this.buf.b += ".";
			this.buf.b += Std.string(this.fieldName(_g[3]));
			break;
		case 7:
			this.generateExpr(_g[2],level);
			this.buf.b += "(";
			var f1 = $bind(this,this.generateExpr);
			var a11 = level;
			this.generateSeparated(_g[3],function(e2) {
				f1(e2,a11);
				return;
			},", ");
			this.buf.b += ")";
			break;
		case 8:
			this.generateExpr(_g[2],level);
			this.buf.b += ".";
			this.buf.b += Std.string(this.fieldName(_g[3]));
			this.buf.b += "(";
			var f2 = $bind(this,this.generateExpr);
			var a12 = level;
			this.generateSeparated(_g[4],function(e3) {
				f2(e3,a12);
			},", ");
			this.buf.b += ")";
			break;
		case 9:
			switch(_g[2][1]) {
			case 0:
				var _this = this.buf;
				var x = JSON.stringify(_g[2][2]);
				_this.b += Std.string(x);
				break;
			case 1:
				var i = _g[2][2];
				this.buf.b += i == null?"null":"" + i;
				break;
			case 2:
				this.buf.b += _g[2][2]?"true":"false";
				break;
			}
			break;
		case 10:
			var v = _g[2];
			this.buf.b += "return";
			if(v != null) {
				this.buf.b += " ";
				this.generateExpr(v,level);
			}
			break;
		case 11:
			this.buf.b += "function(";
			this.generateSeparated(_g[2],function(a) {
				_gthis.buf.b += Std.string(a.name);
			},", ");
			this.buf.b += ") {\n";
			this.generateBlock(_g[4],level + 1);
			this.indent(level);
			this.buf.b += "}";
			break;
		case 12:
			switch(_g[2][1]) {
			case 0:
				this.buf.b += Std.string(_g[2][2].name);
				this.buf.b += " = ";
				this.generateExpr(_g[3],level);
				break;
			case 1:
				this.generateExpr(_g[2][2],level);
				this.buf.b += ".";
				this.buf.b += Std.string(this.fieldName(_g[2][3]));
				this.buf.b += " = ";
				this.generateExpr(_g[3],level);
				break;
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("todo " + Std.string(e));
			break;
		case 14:
			this.generateExpr(_g[3],level);
			this.buf.b += " ";
			this.buf.b += Std.string(toylang_Printer.printBinop(_g[2]));
			this.buf.b += " ";
			this.generateExpr(_g[4],level);
			break;
		case 15:
			var postfix = _g[4];
			var op = _g[2];
			if(!postfix) {
				this.buf.b += Std.string(toylang_Printer.printUnop(op));
			}
			this.buf.b += "(";
			this.generateExpr(_g[3],level);
			this.buf.b += ")";
			if(postfix) {
				this.buf.b += Std.string(toylang_Printer.printUnop(op));
			}
			break;
		case 16:
			throw new js__$Boot_HaxeError("unexpected " + e.kind[0]);
			break;
		}
	}
	,generateSeparated: function(exprs,f,sep) {
		var fst = true;
		var _g = 0;
		while(_g < exprs.length) {
			var e = exprs[_g];
			++_g;
			if(fst) {
				fst = false;
			} else {
				this.buf.b += sep == null?"null":"" + sep;
			}
			f(e);
		}
	}
	,__class__: toylang_GenJs
};
var toylang_Pattern = { __ename__ : true, __constructs__ : ["PConstructor","PTuple","PAny"] };
toylang_Pattern.PConstructor = function(c) { var $x = ["PConstructor",0,c]; $x.__enum__ = toylang_Pattern; $x.toString = $estr; return $x; };
toylang_Pattern.PTuple = function(patterns) { var $x = ["PTuple",1,patterns]; $x.__enum__ = toylang_Pattern; $x.toString = $estr; return $x; };
toylang_Pattern.PAny = ["PAny",2];
toylang_Pattern.PAny.toString = $estr;
toylang_Pattern.PAny.__enum__ = toylang_Pattern;
toylang_Pattern.__empty_constructs__ = [toylang_Pattern.PAny];
var toylang_Constructor = { __ename__ : true, __constructs__ : ["CLiteral"] };
toylang_Constructor.CLiteral = function(l) { var $x = ["CLiteral",0,l]; $x.__enum__ = toylang_Constructor; $x.toString = $estr; return $x; };
toylang_Constructor.__empty_constructs__ = [];
var toylang_DecisionTree = { __ename__ : true, __constructs__ : ["DFail","DLeaf","DSwitch"] };
toylang_DecisionTree.DFail = ["DFail",0];
toylang_DecisionTree.DFail.toString = $estr;
toylang_DecisionTree.DFail.__enum__ = toylang_DecisionTree;
toylang_DecisionTree.DLeaf = function(e) { var $x = ["DLeaf",1,e]; $x.__enum__ = toylang_DecisionTree; $x.toString = $estr; return $x; };
toylang_DecisionTree.DSwitch = function(subject,cases,def) { var $x = ["DSwitch",2,subject,cases,def]; $x.__enum__ = toylang_DecisionTree; $x.toString = $estr; return $x; };
toylang_DecisionTree.__empty_constructs__ = [toylang_DecisionTree.DFail];
var toylang_DTCase = function(ctor,dt) {
	this.ctor = ctor;
	this.dt = dt;
};
toylang_DTCase.__name__ = true;
toylang_DTCase.prototype = {
	__class__: toylang_DTCase
};
var toylang_Matcher = function(typer) {
	this.typer = typer;
};
toylang_Matcher.__name__ = true;
toylang_Matcher.ctorToString = function(c) {
	return "Literal(" + toylang_DebugUtils.literalToString(c[2]) + ")";
};
toylang_Matcher.makeDTGraph = function(dt) {
	var nextId = 0;
	var nodes = [];
	var edges = [];
	var loop = null;
	loop = function(dt1) {
		nextId += 1;
		var nodeId = nextId - 1;
		switch(dt1[1]) {
		case 0:
			nodes.push({ id : nodeId, label : "Fail"});
			break;
		case 1:
			var loop1 = "Leaf(" + new toylang_Printer().printExpr(dt1[2],0) + ")";
			nodes.push({ id : nodeId, label : loop1});
			break;
		case 2:
			var def = dt1[4];
			var cases = dt1[3];
			var loop2 = "Switch(" + toylang_DebugUtils.texprToString(dt1[2]) + ")";
			nodes.push({ id : nodeId, label : loop2});
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var caseId = loop(c.dt);
				var loop3 = "" + toylang_Matcher.ctorToString(c.ctor);
				edges.push({ from : nodeId, to : caseId, label : loop3});
			}
			var defId = loop(def);
			edges.push({ from : nodeId, to : defId, label : "default"});
			break;
		}
		return nodeId;
	};
	loop(dt);
	var _g1 = [];
	var _g11 = 0;
	while(_g11 < nodes.length) {
		var n = nodes[_g11];
		++_g11;
		_g1.push("" + n.id + " [label=" + JSON.stringify(n.label) + "];");
	}
	var _g12 = [];
	var _g2 = 0;
	while(_g2 < edges.length) {
		var e = edges[_g2];
		++_g2;
		_g12.push("" + e.from + " -> " + e.to + " [label=" + JSON.stringify(e.label) + "];");
	}
	_g1.join("\n");
	_g12.join("\n");
};
toylang_Matcher.prototype = {
	match: function(subject,cases) {
		var _gthis = this;
		var matchCases = [];
		var fail = function(e) {
			throw new js__$Boot_HaxeError("Unrecognized pattern " + new toylang_Printer().printExpr(e,0));
		};
		var parsePattern = null;
		parsePattern = function(e1,t) {
			var _g = e1.kind;
			switch(_g[1]) {
			case 1:
				if(_g[2] == "_") {
					return toylang_Pattern.PAny;
				} else {
					return fail(e1);
				}
				break;
			case 2:
				var e2 = _gthis.typer.typeLiteral(_g[2],e1.pos);
				toylang_Typer.unifyThrow(e2.type,t,e2.pos);
				var l;
				var _g1 = e2.kind;
				if(_g1[1] == 9) {
					l = _g1[2];
				} else {
					throw new js__$Boot_HaxeError(false);
				}
				return toylang_Pattern.PConstructor(toylang_Constructor.CLiteral(l));
			case 6:
				var exprs = _g[2];
				var subTypes = t[1] == 3?t[2]:fail(e1);
				if(exprs.length < subTypes.length) {
					throw new js__$Boot_HaxeError("Not enough arguments");
				} else if(exprs.length > subTypes.length) {
					throw new js__$Boot_HaxeError("Too many arguments");
				}
				var _g2 = [];
				var _g21 = 0;
				var _g11 = exprs.length;
				while(_g21 < _g11) {
					var i = _g21++;
					_g2.push(parsePattern(exprs[i],toylang_Typer.follow(subTypes[i])));
				}
				return toylang_Pattern.PTuple(_g2);
			default:
				return fail(e1);
			}
		};
		var parsePattern1 = parsePattern;
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			matchCases.push({ patterns : [parsePattern1(c.pattern,toylang_Typer.follow(subject.type))], expr : c.expr});
		}
		var getSigma = function(cases1,type) {
			var result = new haxe_ds_EnumValueMap();
			var _g4 = 0;
			while(_g4 < cases1.length) {
				var c1 = cases1[_g4];
				++_g4;
				var _g12 = c1.patterns[0];
				switch(_g12[1]) {
				case 0:
					result.set(_g12[2],true);
					break;
				case 1:
					throw new js__$Boot_HaxeError("unexpected tuple pattern (must be expanded before)");
					break;
				case 2:
					break;
				}
			}
			var _g5 = [];
			var c2 = result.keys();
			while(c2.hasNext()) _g5.push(c2.next());
			return _g5;
		};
		var getSpecialized = function(ctor,cases2) {
			var result1 = [];
			var _g6 = 0;
			while(_g6 < cases2.length) {
				var c3 = cases2[_g6];
				++_g6;
				var _g13 = c3.patterns[0];
				switch(_g13[1]) {
				case 0:
					if(Type.enumEq(ctor,_g13[2])) {
						result1.push({ patterns : c3.patterns.slice(1), expr : c3.expr});
					}
					break;
				case 1:
					result1.push({ patterns : _g13[2].concat(c3.patterns.slice(1)), expr : c3.expr});
					break;
				case 2:
					result1.push({ patterns : c3.patterns.slice(1), expr : c3.expr});
					break;
				}
			}
			return result1;
		};
		var getDefault = function(cases3) {
			var result2 = [];
			var _g7 = 0;
			while(_g7 < cases3.length) {
				var c4 = cases3[_g7];
				++_g7;
				var _g14 = c4.patterns[0];
				switch(_g14[1]) {
				case 0:
					break;
				case 1:
					if(Lambda.foreach(_g14[2],function(p) {
						if(p[1] == 2) {
							return true;
						} else {
							return false;
						}
					})) {
						result2.push({ patterns : c4.patterns.slice(1), expr : c4.expr});
					}
					break;
				case 2:
					result2.push({ patterns : c4.patterns.slice(1), expr : c4.expr});
					break;
				}
			}
			return result2;
		};
		var getSubSubjects = function(ctor1,subject1) {
			return [];
		};
		var expandTuple = function(subjects,cases4) {
			var subject2 = subjects[0];
			var _g8 = toylang_Typer.follow(subject2.type);
			if(_g8[1] == 3) {
				var types = _g8[2];
				var _g9 = [];
				var _g22 = 0;
				var _g15 = types.length;
				while(_g22 < _g15) {
					var i1 = _g22++;
					_g9.push(new toylang_TExpr(toylang_TExprKind.TTupleElement(subject2,i1),types[i1],subject2.pos));
				}
				var newCases = [];
				var _g16 = 0;
				while(_g16 < cases4.length) {
					var c5 = cases4[_g16];
					++_g16;
					var subPatterns;
					var _g23 = c5.patterns[0];
					switch(_g23[1]) {
					case 1:
						subPatterns = _g23[2];
						break;
					case 2:
						var _g24 = [];
						var _g41 = 0;
						var _g31 = types.length;
						while(_g41 < _g31) {
							++_g41;
							_g24.push(toylang_Pattern.PAny);
						}
						subPatterns = _g24;
						break;
					default:
						throw new js__$Boot_HaxeError("Unexpected pattern " + Std.string(_g23));
					}
					newCases.push({ expr : c5.expr, patterns : subPatterns.concat(c5.patterns.slice(1))});
				}
				return { subjects : _g9.concat(subjects.slice(1)), cases : newCases};
			} else {
				return null;
			}
		};
		var isWildCardPattern = null;
		isWildCardPattern = function(p1) {
			switch(p1[1]) {
			case 0:
				return false;
			case 1:
				var pl = p1[2];
				var _g10 = 0;
				while(_g10 < pl.length) {
					var p2 = pl[_g10];
					++_g10;
					if(!isWildCardPattern(p2)) {
						return false;
					}
				}
				return true;
			case 2:
				return true;
			}
		};
		var isWildCardPattern1 = isWildCardPattern;
		var selectColumn = function(subjects1,cases5) {
			var numCols = cases5[0].patterns.length;
			var _g17 = [];
			var _g25 = 0;
			while(_g25 < numCols) {
				++_g25;
				_g17.push(0);
			}
			var first = true;
			var _g18 = 0;
			while(_g18 < cases5.length) {
				var c6 = cases5[_g18];
				++_g18;
				var _g32 = 0;
				while(_g32 < numCols) {
					var i2 = _g32++;
					var _g42 = c6.patterns[i2];
					switch(_g42[1]) {
					case 0:
						if(first || _g17[i2] > 0) {
							_g17[i2]++;
						}
						break;
					case 1:
						if(!Lambda.foreach(_g42[2],isWildCardPattern1)) {
							if(first || _g17[i2] > 0) {
								_g17[i2]++;
							}
						}
						break;
					case 2:
						break;
					}
				}
				first = false;
			}
			var col = 0;
			var _g26 = 1;
			while(_g26 < numCols) {
				var i3 = _g26++;
				if(_g17[i3] > _g17[col]) {
					col = i3;
				}
			}
			if(col > 0) {
				var subj = subjects1[col];
				subjects1[col] = subjects1[0];
				subjects1[0] = subj;
				var _g19 = 0;
				while(_g19 < cases5.length) {
					var c7 = cases5[_g19];
					++_g19;
					var pat = c7.patterns[col];
					c7.patterns[col] = c7.patterns[0];
					c7.patterns[0] = pat;
				}
			}
			return { subjects : subjects1, cases : cases5};
		};
		var compile = null;
		compile = function(subjects2,cases6) {
			if(cases6.length == 0) {
				return toylang_DecisionTree.DFail;
			} else if(Lambda.foreach(cases6[0].patterns,isWildCardPattern1)) {
				return toylang_DecisionTree.DLeaf(cases6[0].expr);
			} else {
				while(true) {
					var r = selectColumn(subjects2,cases6);
					subjects2 = r.subjects;
					cases6 = r.cases;
					var r1 = expandTuple(subjects2,cases6);
					if(r1 == null) {
						break;
					}
					subjects2 = r1.subjects;
					cases6 = r1.cases;
				}
				var subject3 = subjects2[0];
				var subjects3 = subjects2.slice(1);
				var _g20 = toylang_Typer.follow(subject3.type);
				if(_g20[1] == 3) {
					var types1 = _g20[2];
					var _g27 = [];
					var _g28 = 0;
					var _g110 = types1.length;
					while(_g28 < _g110) {
						var i4 = _g28++;
						_g27.push(new toylang_TExpr(toylang_TExprKind.TTupleElement(subject3,i4),types1[i4],subject3.pos));
					}
					subject3 = _g27[0];
					subjects3 = _g27.slice(1).concat(subjects3);
					var newCases1 = [];
					var _g111 = 0;
					while(_g111 < cases6.length) {
						var c8 = cases6[_g111];
						++_g111;
						var _g29 = c8.patterns[0];
						if(_g29[1] == 1) {
							newCases1.push({ patterns : _g29[2].concat(c8.patterns.slice(1)), expr : c8.expr});
						} else {
							newCases1.push(c8);
						}
					}
					cases6 = newCases1;
				}
				var sigma = getSigma(cases6,subject3.type);
				var ctorCases = [];
				var _g112 = 0;
				while(_g112 < sigma.length) {
					var ctor2 = sigma[_g112];
					++_g112;
					var spec = getSpecialized(ctor2,cases6);
					var subjects4 = getSubSubjects(ctor2,subject3).concat(subjects3);
					ctorCases.push(new toylang_DTCase(ctor2,compile(subjects4,spec)));
				}
				var defCases = getDefault(cases6);
				return toylang_DecisionTree.DSwitch(subject3,ctorCases,compile(subjects3,defCases));
			}
		};
		return compile([subject],matchCases);
	}
	,__class__: toylang_Matcher
};
var toylang_ParserError = function(message,pos) {
	this.message = message;
	this.pos = pos;
};
toylang_ParserError.__name__ = true;
toylang_ParserError.prototype = {
	toString: function() {
		return "" + Std.string(this.pos) + ": " + Std.string(this.message);
	}
	,__class__: toylang_ParserError
};
var toylang_ParserErrorMessage = { __ename__ : true, __constructs__ : ["MissingSemicolon"] };
toylang_ParserErrorMessage.MissingSemicolon = ["MissingSemicolon",0];
toylang_ParserErrorMessage.MissingSemicolon.toString = $estr;
toylang_ParserErrorMessage.MissingSemicolon.__enum__ = toylang_ParserErrorMessage;
toylang_ParserErrorMessage.__empty_constructs__ = [toylang_ParserErrorMessage.MissingSemicolon];
var toylang_ScannerTokenSource = function(source,file) {
	this.scanner = new toylang_Scanner(source,file);
	this.lastPos = new hxparse_Position(source,0,0);
};
toylang_ScannerTokenSource.__name__ = true;
toylang_ScannerTokenSource.prototype = {
	token: function() {
		var tok;
		while(true) {
			tok = this.scanner.scan();
			if(!(tok.kind == toylang_TokenKind.TkInvalid)) {
				break;
			}
		}
		this.lastPos = new hxparse_Position(tok.pos.file,tok.pos.min,tok.pos.max);
		return tok;
	}
	,curPos: function() {
		return this.lastPos;
	}
	,__class__: toylang_ScannerTokenSource
};
var toylang_Parser = function(input,file,module) {
	this.module = module;
	hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token.call(this,new toylang_ScannerTokenSource(input,file));
};
toylang_Parser.__name__ = true;
toylang_Parser.__interfaces__ = [hxparse_ParserBuilder];
toylang_Parser.precedence = function(op) {
	switch(op[1]) {
	case 0:case 1:
		return 4;
	case 2:case 3:
		return 2;
	case 4:case 5:
		return 1;
	case 6:case 7:case 8:case 9:
		return 3;
	case 10:
		return 5;
	case 11:
		return 6;
	}
};
toylang_Parser.__super__ = hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token;
toylang_Parser.prototype = $extend(hxparse_Parser_$toylang_$ScannerTokenSource_$toylang_$Token.prototype,{
	parse: function() {
		var decls = this.parseDecls([]);
		if(this.peek(0).kind[1] == 23) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return decls;
		} else {
			throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
		}
	}
	,parseDecls: function(acc) {
		try {
			acc.push(this.parseDecl());
			return this.parseDecls(acc);
		} catch( _ ) {
			if (_ instanceof js__$Boot_HaxeError) _ = _.val;
			if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
				return acc;
			} else throw(_);
		}
	}
	,parseDecl: function() {
		try {
			var f = this.parseFunction();
			return new toylang_SyntaxDecl(this.module,f.fun.name,f.pos,toylang_DeclKind.DFunction(f.fun));
		} catch( _ ) {
			if (_ instanceof js__$Boot_HaxeError) _ = _.val;
			if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
				var _g = this.peek(0);
				if(_g.kind[1] == 0) {
					if(_g.kind[2][1] == 1) {
						var pmin = _g.pos;
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g1 = this.peek(0);
						if(_g1.kind[1] == 1) {
							var name = _g1.kind[2];
							this.last = this.token.elt;
							this.token = this.token.next;
							var params = this.parseTypeParams();
							if(this.peek(0).kind[1] == 5) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var fields = this.parseRepeat($bind(this,this.parseClassField));
								if(this.peek(0).kind[1] == 6) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var classDecl = new toylang_ClassDecl();
									classDecl.fields = fields;
									classDecl.params = params;
									return new toylang_SyntaxDecl(this.module,name,toylang_Position.union(pmin,this.last.pos),toylang_DeclKind.DClass(classDecl));
								} else {
									throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else throw(_);
		}
	}
	,parseTypeParams: function() {
		if(this.peek(0).kind[1] == 18) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var params = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseIdent));
			if(this.peek(0).kind[1] == 19) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g = [];
				var _g1 = 0;
				while(_g1 < params.length) {
					var p = params[_g1];
					++_g1;
					_g.push(new toylang_TypeParamDecl(p));
				}
				return _g;
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			return [];
		}
	}
	,parseClassField: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 0) {
			if(_g.kind[2][1] == 3) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var f = this.parseFunction();
				var f1 = new toylang_Field(f.fun.name,toylang_FieldKind.FFun(f.fun),f.pos);
				f1.modifiers.push(toylang_FieldModifier.FMConst);
				return f1;
			} else {
				try {
					var f2 = this.parseFunction();
					return new toylang_Field(f2.fun.name,toylang_FieldKind.FFun(f2.fun),f2.pos);
				} catch( _ ) {
					if (_ instanceof js__$Boot_HaxeError) _ = _.val;
					if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
						var v = this.parseVarField();
						this.checkSemicolon();
						return new toylang_Field(v.name,toylang_FieldKind.FVar(v.type,v.initial),v.pos);
					} else throw(_);
				}
			}
		} else {
			try {
				var f3 = this.parseFunction();
				return new toylang_Field(f3.fun.name,toylang_FieldKind.FFun(f3.fun),f3.pos);
			} catch( _1 ) {
				if (_1 instanceof js__$Boot_HaxeError) _1 = _1.val;
				if( js_Boot.__instanceof(_1,hxparse_NoMatch) ) {
					var v1 = this.parseVarField();
					this.checkSemicolon();
					return new toylang_Field(v1.name,toylang_FieldKind.FVar(v1.type,v1.initial),v1.pos);
				} else throw(_1);
			}
		}
	}
	,parseFunction: function() {
		var _gthis = this;
		var _g = this.peek(0);
		if(_g.kind[1] == 0) {
			if(_g.kind[2][1] == 0) {
				var pmin = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.kind[1] == 1) {
					var name = _g1.kind[2];
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0).kind[1] == 3) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var args = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseFunctionArg));
						if(this.peek(0).kind[1] == 4) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var ret = this.parseOptional($bind(this,this.parseTypeHint));
							var expr = this.parseExpect(function() {
								try {
									return _gthis.parseExprWithSemicolon();
								} catch( _ ) {
									if (_ instanceof js__$Boot_HaxeError) _ = _.val;
									if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
										if(_gthis.peek(0).kind[1] == 10) {
											_gthis.last = _gthis.token.elt;
											_gthis.token = _gthis.token.next;
											return null;
										} else {
											throw new js__$Boot_HaxeError(new hxparse_NoMatch(_gthis.stream.curPos(),_gthis.peek(0)));
										}
									} else throw(_);
								}
							});
							var f = new toylang_FunctionDecl();
							f.name = name;
							f.args = args;
							f.ret = ret;
							f.expr = expr;
							return { fun : f, pos : toylang_Position.union(pmin,this.last.pos)};
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseFunctionArg: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 1) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return new toylang_FunctionArg(_g.kind[2],this.parseOptional($bind(this,this.parseTypeHint)));
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseVarField: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 0) {
			if(_g.kind[2][1] == 2) {
				var pmin = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g1 = this.peek(0);
				if(_g1.kind[1] == 1) {
					var name = _g1.kind[2];
					this.last = this.token.elt;
					this.token = this.token.next;
					var type = this.parseOptional($bind(this,this.parseTypeHint));
					var expr;
					if(this.peek(0).kind[1] == 12) {
						this.last = this.token.elt;
						this.token = this.token.next;
						expr = this.parseExpr();
					} else {
						expr = null;
					}
					return { name : name, type : type, initial : expr, pos : toylang_Position.union(pmin,this.last.pos)};
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseTypeHint: function() {
		if(this.peek(0).kind[1] == 9) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.parseExpect($bind(this,this.parseSyntaxType));
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseSyntaxType: function() {
		var _g = this.peek(0);
		switch(_g.kind[1]) {
		case 0:
			if(_g.kind[2][1] == 3) {
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0).kind[1] == 3) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var type = this.parseSyntaxType();
					if(this.peek(0).kind[1] == 4) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return toylang_SyntaxType.TConst(type);
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				return toylang_SyntaxType.TPath(this.parseTypePath());
			}
			break;
		case 3:
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0).kind[1] == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return toylang_SyntaxType.TTuple([]);
			} else {
				try {
					var type1 = this.parseSyntaxType();
					if(this.peek(0).kind[1] == 7) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var types = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseSyntaxType));
						if(this.peek(0).kind[1] == 4) {
							this.last = this.token.elt;
							this.token = this.token.next;
							types.unshift(type1);
							return toylang_SyntaxType.TTuple(types);
						} else {
							throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} catch( _ ) {
					if (_ instanceof js__$Boot_HaxeError) _ = _.val;
					if( js_Boot.__instanceof(_,hxparse_NoMatch) ) {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					} else throw(_);
				}
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0).kind[1] == 3) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var args = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseLambdaArg));
				if(this.peek(0).kind[1] == 4) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0).kind[1] == 11) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return toylang_SyntaxType.TFunction(args,this.parseSyntaxType());
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			return toylang_SyntaxType.TPath(this.parseTypePath());
		}
	}
	,parseLambdaArg: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 1) {
			var ident = _g.kind[2];
			this.last = this.token.elt;
			this.token = this.token.next;
			switch(this.peek(0).kind[1]) {
			case 8:
				this.last = this.token.elt;
				this.token = this.token.next;
				var path = this.parseDotPath([ident]);
				return new toylang_FunctionArg("",toylang_SyntaxType.TPath(new toylang_TypePath(path,path.pop())));
			case 9:
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_FunctionArg(ident,this.parseExpect($bind(this,this.parseSyntaxType)));
			default:
				return new toylang_FunctionArg("",toylang_SyntaxType.TPath(new toylang_TypePath([],ident)));
			}
		} else {
			return new toylang_FunctionArg("",this.parseSyntaxType());
		}
	}
	,parseDotPath: function(acc) {
		while(true) {
			var _g = this.peek(0);
			if(_g.kind[1] == 1) {
				this.last = this.token.elt;
				this.token = this.token.next;
				acc.push(_g.kind[2]);
				if(this.peek(0).kind[1] == 8) {
					this.last = this.token.elt;
					this.token = this.token.next;
				} else {
					break;
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		}
		return acc;
	}
	,parseTypePath: function() {
		var path = this.parseDotPath([]);
		return new toylang_TypePath(path,path.pop());
	}
	,parseIdent: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 1) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return _g.kind[2];
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseExprWithSemicolon: function() {
		var e = this.parseExpr();
		this.checkSemicolon();
		return e;
	}
	,parseExpr: function() {
		var _g = this.peek(0);
		switch(_g.kind[1]) {
		case 0:
			switch(_g.kind[2][1]) {
			case 4:
				var pmin = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0).kind[1] == 3) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var econd = this.parseExpr();
					if(this.peek(0).kind[1] == 4) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var ethen = this.parseExpr();
						var eelse;
						var _g1 = this.peek(0);
						if(_g1.kind[1] == 0) {
							if(_g1.kind[2][1] == 5) {
								this.last = this.token.elt;
								this.token = this.token.next;
								eelse = this.parseExpr();
							} else {
								var _g2 = this.peek(1);
								if(this.peek(0).kind[1] == 10) {
									if(_g2.kind[1] == 0) {
										if(_g2.kind[2][1] == 5) {
											this.last = this.token.elt;
											this.token = this.token.next;
											this.last = this.token.elt;
											this.token = this.token.next;
											eelse = this.parseExpr();
										} else {
											eelse = null;
										}
									} else {
										eelse = null;
									}
								} else {
									eelse = null;
								}
							}
						} else {
							var _g3 = this.peek(1);
							if(this.peek(0).kind[1] == 10) {
								if(_g3.kind[1] == 0) {
									if(_g3.kind[2][1] == 5) {
										this.last = this.token.elt;
										this.token = this.token.next;
										this.last = this.token.elt;
										this.token = this.token.next;
										eelse = this.parseExpr();
									} else {
										eelse = null;
									}
								} else {
									eelse = null;
								}
							} else {
								eelse = null;
							}
						}
						return new toylang_Expr(toylang_ExprKind.EIf(econd,ethen,eelse),toylang_Position.union(pmin,this.last.pos));
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 6:
				var pmin1 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0).kind[1] == 3) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var econd1 = this.parseExpr();
					if(this.peek(0).kind[1] == 4) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return new toylang_Expr(toylang_ExprKind.EWhile(econd1,this.parseExpr()),toylang_Position.union(pmin1,this.last.pos));
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 7:
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.EBreak,this.last.pos);
			case 8:
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.EContinue,this.last.pos);
			case 9:
				var pmin2 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.EReturn(this.parseOptional($bind(this,this.parseExpr))),toylang_Position.union(pmin2,this.last.pos));
			case 10:
				var pmin3 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.ENew(this.parseExpect($bind(this,this.parseTypePath))),toylang_Position.union(pmin3,this.last.pos));
			case 11:
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseExprNext(new toylang_Expr(toylang_ExprKind.EIdent("this"),this.last.pos));
			case 12:
				var pmin4 = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var expr = this.parseExpect($bind(this,this.parseExpr));
				if(this.peek(0).kind[1] == 5) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var cases = this.parseRepeat($bind(this,this.parseSwitchCase));
					if(this.peek(0).kind[1] == 6) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return new toylang_Expr(toylang_ExprKind.ESwitch(expr,cases),toylang_Position.union(pmin4,this.last.pos));
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 14:
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.ELiteral(toylang_Literal.LBool(true)),this.last.pos);
			case 15:
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.ELiteral(toylang_Literal.LBool(false)),this.last.pos);
			default:
				var v = this.parseVarExpr();
				return new toylang_Expr(toylang_ExprKind.EVar(v.binding,v.type,v.initial),v.pos);
			}
			break;
		case 1:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.parseExprNext(new toylang_Expr(toylang_ExprKind.EIdent(_g.kind[2]),this.last.pos));
		case 2:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.parseExprNext(new toylang_Expr(toylang_ExprKind.ELiteral(_g.kind[2]),this.last.pos));
		case 3:
			var pmin5 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0).kind[1] == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseExprNext(new toylang_Expr(toylang_ExprKind.ETuple([]),toylang_Position.union(pmin5,this.last.pos)));
			} else {
				var e = this.parseExpr();
				switch(this.peek(0).kind[1]) {
				case 4:
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseExprNext(new toylang_Expr(toylang_ExprKind.EParens(e),toylang_Position.union(pmin5,this.last.pos)));
				case 7:
					this.last = this.token.elt;
					this.token = this.token.next;
					var exprs = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseExpr));
					if(this.peek(0).kind[1] == 4) {
						this.last = this.token.elt;
						this.token = this.token.next;
						exprs.unshift(e);
						return this.parseExprNext(new toylang_Expr(toylang_ExprKind.ETuple(exprs),toylang_Position.union(pmin5,this.last.pos)));
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			}
			break;
		case 5:
			var pmin6 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			var exprs1 = this.parseRepeat($bind(this,this.parseExprWithSemicolon));
			if(this.peek(0).kind[1] == 6) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return new toylang_Expr(toylang_ExprKind.EBlock(exprs1),toylang_Position.union(pmin6,this.last.pos));
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 14:
			var pmin7 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mPrefixUnop(toylang_Unop.OpNot,this.parseExpect($bind(this,this.parseExpr)),pmin7);
		case 22:
			var pmin8 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g4 = this.peek(0);
			switch(_g4.kind[1]) {
			case 1:
				var arg = _g4.kind[2];
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0).kind[1] == 11) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var e1 = this.parseExpr();
					return new toylang_Expr(toylang_ExprKind.EArrowFunction([new toylang_FunctionArg(arg,null)],null,e1),toylang_Position.union(pmin8,this.last.pos));
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			case 3:
				this.last = this.token.elt;
				this.token = this.token.next;
				var args = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseFunctionArg));
				if(this.peek(0).kind[1] == 4) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var ret = this.parseOptional($bind(this,this.parseTypeHint));
					if(this.peek(0).kind[1] == 11) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return new toylang_Expr(toylang_ExprKind.EArrowFunction(args,ret,this.parseExpr()),toylang_Position.union(pmin8,this.last.pos));
					} else {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 25:
			var pmin9 = _g.pos;
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mPrefixUnop(toylang_Unop.OpNeg,this.parseExpect($bind(this,this.parseExpr)),pmin9);
		default:
			var v1 = this.parseVarExpr();
			return new toylang_Expr(toylang_ExprKind.EVar(v1.binding,v1.type,v1.initial),v1.pos);
		}
	}
	,parseVarExpr: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 0) {
			if(_g.kind[2][1] == 2) {
				var pmin = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var binding = this.parseVarBinding();
				var type = this.parseOptional($bind(this,this.parseTypeHint));
				var expr;
				if(this.peek(0).kind[1] == 12) {
					this.last = this.token.elt;
					this.token = this.token.next;
					expr = this.parseExpr();
				} else {
					expr = null;
				}
				return { binding : binding, type : type, initial : expr, pos : toylang_Position.union(pmin,this.last.pos)};
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseVarBinding: function() {
		var _g = this.peek(0);
		switch(_g.kind[1]) {
		case 1:
			this.last = this.token.elt;
			this.token = this.token.next;
			return toylang_VarBinding.VName(_g.kind[2]);
		case 3:
			this.last = this.token.elt;
			this.token = this.token.next;
			var first = this.parseVarBinding();
			if(this.peek(0).kind[1] == 7) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var rest = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseVarBinding));
				if(this.peek(0).kind[1] == 4) {
					this.last = this.token.elt;
					this.token = this.token.next;
					rest.unshift(first);
					return toylang_VarBinding.VTuple(rest);
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseSwitchCase: function() {
		var _g = this.peek(0);
		if(_g.kind[1] == 0) {
			if(_g.kind[2][1] == 13) {
				var pmin = _g.pos;
				this.last = this.token.elt;
				this.token = this.token.next;
				var pattern = this.parseExpect($bind(this,this.parseExpr));
				var _g1 = this.peek(0);
				if(_g1.kind[1] == 9) {
					var pmax = _g1.pos;
					this.last = this.token.elt;
					this.token = this.token.next;
					var exprs = this.parseRepeat($bind(this,this.parseExprWithSemicolon));
					return new toylang_Case(pattern,new toylang_Expr(toylang_ExprKind.EBlock(exprs),exprs.length > 0?toylang_Position.union(exprs[0].pos,exprs[exprs.length - 1].pos):toylang_Position.union(pmin,pmax)));
				} else {
					throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw new js__$Boot_HaxeError(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseExprNext: function(expr) {
		switch(this.peek(0).kind[1]) {
		case 3:
			this.last = this.token.elt;
			this.token = this.token.next;
			var args = this.separated(toylang_TokenKind.TkComma,$bind(this,this.parseExpr));
			if(this.peek(0).kind[1] == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseExprNext(new toylang_Expr(toylang_ExprKind.ECall(expr,args),toylang_Position.union(expr.pos,this.last.pos)));
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 8:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this.peek(0);
			if(_g.kind[1] == 1) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseExprNext(new toylang_Expr(toylang_ExprKind.EField(expr,_g.kind[2]),toylang_Position.union(expr.pos,this.last.pos)));
			} else {
				throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 12:
			this.last = this.token.elt;
			this.token = this.token.next;
			return new toylang_Expr(toylang_ExprKind.EAssign(expr,this.parseExpect($bind(this,this.parseExpr))),toylang_Position.union(expr.pos,this.last.pos));
		case 13:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpEq,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 14:
			this.last = this.token.elt;
			this.token = this.token.next;
			return new toylang_Expr(toylang_ExprKind.EUnop(toylang_Unop.OpNot,expr,true),toylang_Position.union(expr.pos,this.last.pos));
		case 15:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpNotEq,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 16:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpBoolAnd,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 17:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpBoolOr,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 18:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpLt,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 19:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpGt,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 20:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpLte,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 21:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpGte,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 24:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpAdd,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 25:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpSub,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 26:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpMul,expr,this.parseExpect($bind(this,this.parseExpr)));
		case 27:
			this.last = this.token.elt;
			this.token = this.token.next;
			return this.mkBinop(toylang_Binop.OpDiv,expr,this.parseExpect($bind(this,this.parseExpr)));
		default:
			return expr;
		}
	}
	,mPrefixUnop: function(op,expr,pmin) {
		var _g = expr.kind;
		switch(_g[1]) {
		case 2:
			if(_g[2][1] == 1) {
				var i = _g[2][2];
				if(i.charCodeAt(0) == 45) {
					i = i.substring(1);
				} else {
					i = "-" + i;
				}
				return new toylang_Expr(toylang_ExprKind.ELiteral(toylang_Literal.LInt(i)),toylang_Position.union(pmin,expr.pos));
			} else {
				return new toylang_Expr(toylang_ExprKind.EUnop(op,expr,false),toylang_Position.union(pmin,expr.pos));
			}
			break;
		case 13:
			var right = _g[4];
			var left = _g[3];
			return new toylang_Expr(toylang_ExprKind.EBinop(_g[2],new toylang_Expr(toylang_ExprKind.EUnop(op,left,false),toylang_Position.union(pmin,left.pos)),right),toylang_Position.union(pmin,right.pos));
		default:
			return new toylang_Expr(toylang_ExprKind.EUnop(op,expr,false),toylang_Position.union(pmin,expr.pos));
		}
	}
	,mkBinop: function(op,left,right) {
		var _g = right.kind;
		switch(_g[1]) {
		case 12:
			var rRight = _g[3];
			var left1 = this.mkBinop(op,left,_g[2]);
			return new toylang_Expr(toylang_ExprKind.EAssign(left1,rRight),toylang_Position.union(left1.pos,rRight.pos));
		case 13:
			var rRight1 = _g[4];
			var rOp = _g[2];
			if(toylang_Parser.precedence(op) <= toylang_Parser.precedence(rOp)) {
				var left2 = this.mkBinop(op,left,_g[3]);
				return new toylang_Expr(toylang_ExprKind.EBinop(rOp,left2,rRight1),toylang_Position.union(left2.pos,rRight1.pos));
			} else {
				return new toylang_Expr(toylang_ExprKind.EBinop(op,left,right),toylang_Position.union(left.pos,right.pos));
			}
			break;
		default:
			return new toylang_Expr(toylang_ExprKind.EBinop(op,left,right),toylang_Position.union(left.pos,right.pos));
		}
	}
	,checkSemicolon: function() {
		if(this.last.kind == toylang_TokenKind.TkBraceClose) {
			if(this.peek(0).kind[1] == 10) {
				this.last = this.token.elt;
				this.token = this.token.next;
			}
		} else if(this.peek(0).kind[1] == 10) {
			this.last = this.token.elt;
			this.token = this.token.next;
		} else {
			throw new js__$Boot_HaxeError(new toylang_ParserError(toylang_ParserErrorMessage.MissingSemicolon,new toylang_Position(this.last.pos.file,this.last.pos.max,this.last.pos.max)));
		}
	}
	,separated: function(kind,f) {
		var acc = [];
		var hadSep = false;
		while(true) {
			try {
				acc.push(f());
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,hxparse_NoMatch) ) {
					if(hadSep) {
						throw new js__$Boot_HaxeError(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				} else throw(e);
			}
			if(this.peek(0).kind == kind) {
				hadSep = true;
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,mk: function(kind,pos) {
		return new toylang_Expr(kind,pos);
	}
	,__class__: toylang_Parser
});
var toylang_Position = function(file,min,max) {
	this.file = file;
	this.min = min;
	this.max = max;
};
toylang_Position.__name__ = true;
toylang_Position.union = function(a,b) {
	return new toylang_Position(a.file,a.min < b.min?a.min:b.min,a.max > b.max?a.max:b.max);
};
toylang_Position.prototype = {
	format: function(input) {
		return new hxparse_Position(this.file,this.min,this.max).format(input);
	}
	,toString: function() {
		return "" + this.file + ":" + this.min + "-" + this.max;
	}
	,__class__: toylang_Position
};
var toylang_Printer = function(indentString) {
	if(indentString == null) {
		indentString = "  ";
	}
	this.indentString = indentString;
};
toylang_Printer.__name__ = true;
toylang_Printer.printLiteral = function(l) {
	switch(l[1]) {
	case 0:
		var buf_b = "";
		buf_b = "\"";
		buf_b = "\"" + Std.string(toylang_Scanner.escapeString(l[2]));
		buf_b += "\"";
		return buf_b;
	case 1:
		return l[2];
	case 2:
		if(l[2]) {
			return "true";
		} else {
			return "false";
		}
		break;
	}
};
toylang_Printer.printUnop = function(op) {
	switch(op[1]) {
	case 0:
		return "!";
	case 1:
		return "-";
	}
};
toylang_Printer.printBinop = function(op) {
	switch(op[1]) {
	case 0:
		return "==";
	case 1:
		return "!=";
	case 2:
		return "+";
	case 3:
		return "-";
	case 4:
		return "/";
	case 5:
		return "*";
	case 6:
		return ">";
	case 7:
		return ">=";
	case 8:
		return "<";
	case 9:
		return "<=";
	case 10:
		return "&&";
	case 11:
		return "||";
	}
};
toylang_Printer.prototype = {
	indent: function(level) {
		return StringTools.lpad("",this.indentString,level * this.indentString.length);
	}
	,printSyntaxDecl: function(decl) {
		var _g = decl.kind;
		switch(_g[1]) {
		case 0:
			return this.printFunction(_g[2],0);
		case 1:
			return this.printClass(decl,_g[2],0);
		}
	}
	,printClass: function(decl,cls,level) {
		var buf_b = "";
		buf_b = "class ";
		buf_b = "class " + Std.string(decl.name);
		buf_b += Std.string(this.printTypeParams(cls.params));
		buf_b += " {";
		var fst = true;
		var _g = 0;
		var _g1 = cls.fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(fst) {
				fst = false;
				buf_b += "\n";
			}
			buf_b += Std.string(this.indent(level + 1));
			var _g2 = 0;
			var _g3 = field.modifiers;
			while(_g2 < _g3.length) {
				++_g2;
				buf_b += "const";
				buf_b += " ";
			}
			var _g21 = field.kind;
			switch(_g21[1]) {
			case 0:
				buf_b += Std.string(this.printFunction(_g21[2],level + 1));
				break;
			case 1:
				buf_b += Std.string(this.printVar(toylang_VarBinding.VName(field.name),_g21[2],_g21[3],level + 1));
				buf_b += ";";
				break;
			}
			buf_b += "\n";
		}
		buf_b += "}";
		return buf_b;
	}
	,printTypeParams: function(params) {
		if(params.length == 0) {
			return "";
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				_g.push(p.name);
			}
			return "<" + _g.join(", ") + ">";
		}
	}
	,printFunction: function(fun,level) {
		var buf_b = "";
		buf_b = "function ";
		buf_b = "function " + Std.string(fun.name);
		buf_b += "(";
		var fst = true;
		var _g = 0;
		var _g1 = fun.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			if(fst) {
				fst = false;
			} else {
				buf_b += ", ";
			}
			buf_b += Std.string(arg.name);
			if(arg.type != null) {
				buf_b += ":";
				buf_b += Std.string(this.printSyntaxType(arg.type));
			}
		}
		buf_b += ")";
		if(fun.ret != null) {
			buf_b += ":";
			buf_b += Std.string(this.printSyntaxType(fun.ret));
		}
		if(fun.expr == null) {
			buf_b += ";";
		} else {
			buf_b += " ";
			buf_b += Std.string(this.printExpr(fun.expr,level));
		}
		return buf_b;
	}
	,printVar: function(binding,type,initial,level) {
		var buf_b = "";
		buf_b = "var ";
		buf_b = "var " + Std.string(this.printVarBinding(binding));
		if(type != null) {
			buf_b += ":";
			buf_b += Std.string(this.printSyntaxType(type));
		}
		if(initial != null) {
			buf_b += " = ";
			buf_b += Std.string(this.printExpr(initial,level));
		}
		return buf_b;
	}
	,printVarBinding: function(binding) {
		switch(binding[1]) {
		case 0:
			return binding[2];
		case 1:
			var binds = binding[2];
			switch(binds.length) {
			case 0:
				throw new js__$Boot_HaxeError("tuple var bindings can't be empty");
				break;
			case 1:
				return "(" + this.printVarBinding(binds[0]) + ",)";
			default:
				var _g = [];
				var _g1 = 0;
				while(_g1 < binds.length) {
					var b = binds[_g1];
					++_g1;
					_g.push(this.printVarBinding(b));
				}
				return "(" + _g.join(", ") + ")";
			}
			break;
		}
	}
	,printBlockExpr: function(buf,expr,level) {
		buf.b += Std.string(this.indent(level));
		var e = this.printExpr(expr,level);
		buf.b += e == null?"null":"" + e;
		if(e.charCodeAt(e.length - 1) != 125) {
			buf.b += ";";
		}
		buf.b += "\n";
	}
	,printExpr: function(expr,level) {
		var _g = expr.kind;
		switch(_g[1]) {
		case 0:
			var exprs = _g[2];
			var buf = new StringBuf();
			buf.b += "{";
			var fst = true;
			var _g1 = 0;
			while(_g1 < exprs.length) {
				var e = exprs[_g1];
				++_g1;
				if(fst) {
					fst = false;
					buf.b += "\n";
				}
				this.printBlockExpr(buf,e,level + 1);
			}
			if(!fst) {
				buf.b += Std.string(this.indent(level));
			}
			buf.b += "}";
			return buf.b;
		case 1:
			return _g[2];
		case 2:
			return toylang_Printer.printLiteral(_g[2]);
		case 3:
			var fieldName = _g[3];
			var buf_b = "";
			buf_b = "" + Std.string(this.printExpr(_g[2],level));
			buf_b += ".";
			buf_b += fieldName == null?"null":"" + fieldName;
			return buf_b;
		case 4:
			var args = _g[3];
			var buf_b1 = "";
			buf_b1 = "" + Std.string(this.printExpr(_g[2],level));
			buf_b1 += "(";
			var fst1 = true;
			var _g2 = 0;
			while(_g2 < args.length) {
				var arg = args[_g2];
				++_g2;
				if(fst1) {
					fst1 = false;
				} else {
					buf_b1 += ", ";
				}
				buf_b1 += Std.string(this.printExpr(arg,level));
			}
			buf_b1 += ")";
			return buf_b1;
		case 5:
			return this.printVar(_g[2],_g[3],_g[4],level);
		case 6:
			var exprs1 = _g[2];
			switch(exprs1.length) {
			case 0:
				return "()";
			case 1:
				return "(" + this.printExpr(exprs1[0],level) + ",)";
			default:
				var _g3 = [];
				var _g11 = 0;
				while(_g11 < exprs1.length) {
					var e1 = exprs1[_g11];
					++_g11;
					_g3.push(this.printExpr(e1,level));
				}
				return "(" + _g3.join(", ") + ")";
			}
			break;
		case 7:
			return "(" + this.printExpr(_g[2],level) + ")";
		case 8:
			var path = _g[2];
			var buf_b2 = "";
			buf_b2 = "new ";
			if(path == null) {
				throw new js__$Boot_HaxeError("TODO");
			} else {
				buf_b2 = "new " + Std.string(path.module.concat([path.name]).join("."));
			}
			return buf_b2;
		case 9:
			var els = _g[4];
			var buf_b3 = "";
			buf_b3 = "if (";
			buf_b3 = "if (" + Std.string(this.printExpr(_g[2],level));
			buf_b3 += ") ";
			buf_b3 += Std.string(this.printExpr(_g[3],level));
			if(els != null) {
				buf_b3 += " else ";
				buf_b3 += Std.string(this.printExpr(els,level));
			}
			return buf_b3;
		case 10:
			var expr1 = _g[4];
			var ret = _g[3];
			var args1 = _g[2];
			var buf_b4 = "";
			if(args1.length == 1 && args1[0].type == null && ret == null) {
				buf_b4 = "" + Std.string(args1[0].name);
			} else {
				buf_b4 = "(";
				var _g4 = [];
				var _g12 = 0;
				while(_g12 < args1.length) {
					var arg1 = args1[_g12];
					++_g12;
					_g4.push(arg1.name + (arg1.type == null?"":":" + this.printSyntaxType(arg1.type)));
				}
				buf_b4 = "(" + Std.string(_g4.join(", "));
				buf_b4 += ")";
				if(ret != null) {
					buf_b4 += ":";
					buf_b4 += Std.string(this.printSyntaxType(ret));
				}
			}
			buf_b4 += " => ";
			buf_b4 += Std.string(this.printExpr(expr1,level));
			return buf_b4;
		case 11:
			var buf_b5 = "";
			buf_b5 = "while (";
			buf_b5 = "while (" + Std.string(this.printExpr(_g[2],level));
			buf_b5 += ") ";
			buf_b5 += Std.string(this.printExpr(_g[3],level));
			return buf_b5;
		case 12:
			var buf_b6 = "";
			buf_b6 = "" + Std.string(this.printExpr(_g[2],level));
			buf_b6 += " = ";
			buf_b6 += Std.string(this.printExpr(_g[3],level));
			return buf_b6;
		case 13:
			var buf_b7 = "";
			buf_b7 = "" + Std.string(this.printExpr(_g[3],level));
			buf_b7 += " ";
			buf_b7 += Std.string(toylang_Printer.printBinop(_g[2]));
			buf_b7 += " ";
			buf_b7 += Std.string(this.printExpr(_g[4],level));
			return buf_b7;
		case 14:
			var s = "(" + this.printExpr(_g[3],level) + ")";
			var op = toylang_Printer.printUnop(_g[2]);
			if(_g[4]) {
				return s + op;
			} else {
				return op + s;
			}
			break;
		case 15:
			return "break";
		case 16:
			return "continue";
		case 17:
			var e2 = _g[2];
			if(e2 == null) {
				return "return";
			} else {
				return "return " + this.printExpr(e2,level);
			}
			break;
		case 18:
			var cases = _g[3];
			var buf1 = new StringBuf();
			buf1.b += "switch ";
			var x = this.printExpr(_g[2],level);
			buf1.b += Std.string(x);
			buf1.b += " {\n";
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c = cases[_g5];
				++_g5;
				buf1.b = (buf1.b += Std.string(this.indent(level + 1))) + "case ";
				var x1 = this.printExpr(c.pattern,level + 1);
				buf1.b += Std.string(x1);
				buf1.b += ":\n";
				var _g13 = c.expr.kind;
				if(_g13[1] == 0) {
					var exprs2 = _g13[2];
					var _g14 = 0;
					while(_g14 < exprs2.length) {
						var e3 = exprs2[_g14];
						++_g14;
						this.printBlockExpr(buf1,e3,level + 2);
					}
				} else {
					this.printBlockExpr(buf1,c.expr,level + 2);
				}
			}
			buf1.b = (buf1.b += Std.string(this.indent(level))) + "}";
			return buf1.b;
		}
	}
	,printSyntaxType: function(type) {
		switch(type[1]) {
		case 0:
			var path = type[2];
			return path.module.concat([path.name]).join(".");
		case 1:
			var types = type[2];
			switch(types.length) {
			case 0:
				return "()";
			case 1:
				return "(" + this.printSyntaxType(types[0]) + ",)";
			default:
				return "(" + types.map($bind(this,this.printSyntaxType)).join(", ") + ")";
			}
			break;
		case 2:
			var ret = type[3];
			var args = type[2];
			var b_b = "";
			b_b = "(";
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var arg = args[_g1];
				++_g1;
				_g.push("" + arg.name + ":" + this.printSyntaxType(arg.type));
			}
			b_b = "(" + Std.string(_g.join(", "));
			b_b += ")=>";
			b_b += Std.string(this.printSyntaxType(ret));
			return b_b;
		case 3:
			var b_b1 = "";
			b_b1 = "const(";
			b_b1 = "const(" + Std.string(this.printSyntaxType(type[2]));
			b_b1 += ")";
			return b_b1;
		}
	}
	,printTypePath: function(path) {
		return path.module.concat([path.name]).join(".");
	}
	,__class__: toylang_Printer
};
var toylang_Keyword = { __ename__ : true, __constructs__ : ["KwdFunction","KwdClass","KwdVar","KwdConst","KwdIf","KwdElse","KwdWhile","KwdBreak","KwdContinue","KwdReturn","KwdNew","KwdThis","KwdSwitch","KwdCase","KwdTrue","KwdFalse"] };
toylang_Keyword.KwdFunction = ["KwdFunction",0];
toylang_Keyword.KwdFunction.toString = $estr;
toylang_Keyword.KwdFunction.__enum__ = toylang_Keyword;
toylang_Keyword.KwdClass = ["KwdClass",1];
toylang_Keyword.KwdClass.toString = $estr;
toylang_Keyword.KwdClass.__enum__ = toylang_Keyword;
toylang_Keyword.KwdVar = ["KwdVar",2];
toylang_Keyword.KwdVar.toString = $estr;
toylang_Keyword.KwdVar.__enum__ = toylang_Keyword;
toylang_Keyword.KwdConst = ["KwdConst",3];
toylang_Keyword.KwdConst.toString = $estr;
toylang_Keyword.KwdConst.__enum__ = toylang_Keyword;
toylang_Keyword.KwdIf = ["KwdIf",4];
toylang_Keyword.KwdIf.toString = $estr;
toylang_Keyword.KwdIf.__enum__ = toylang_Keyword;
toylang_Keyword.KwdElse = ["KwdElse",5];
toylang_Keyword.KwdElse.toString = $estr;
toylang_Keyword.KwdElse.__enum__ = toylang_Keyword;
toylang_Keyword.KwdWhile = ["KwdWhile",6];
toylang_Keyword.KwdWhile.toString = $estr;
toylang_Keyword.KwdWhile.__enum__ = toylang_Keyword;
toylang_Keyword.KwdBreak = ["KwdBreak",7];
toylang_Keyword.KwdBreak.toString = $estr;
toylang_Keyword.KwdBreak.__enum__ = toylang_Keyword;
toylang_Keyword.KwdContinue = ["KwdContinue",8];
toylang_Keyword.KwdContinue.toString = $estr;
toylang_Keyword.KwdContinue.__enum__ = toylang_Keyword;
toylang_Keyword.KwdReturn = ["KwdReturn",9];
toylang_Keyword.KwdReturn.toString = $estr;
toylang_Keyword.KwdReturn.__enum__ = toylang_Keyword;
toylang_Keyword.KwdNew = ["KwdNew",10];
toylang_Keyword.KwdNew.toString = $estr;
toylang_Keyword.KwdNew.__enum__ = toylang_Keyword;
toylang_Keyword.KwdThis = ["KwdThis",11];
toylang_Keyword.KwdThis.toString = $estr;
toylang_Keyword.KwdThis.__enum__ = toylang_Keyword;
toylang_Keyword.KwdSwitch = ["KwdSwitch",12];
toylang_Keyword.KwdSwitch.toString = $estr;
toylang_Keyword.KwdSwitch.__enum__ = toylang_Keyword;
toylang_Keyword.KwdCase = ["KwdCase",13];
toylang_Keyword.KwdCase.toString = $estr;
toylang_Keyword.KwdCase.__enum__ = toylang_Keyword;
toylang_Keyword.KwdTrue = ["KwdTrue",14];
toylang_Keyword.KwdTrue.toString = $estr;
toylang_Keyword.KwdTrue.__enum__ = toylang_Keyword;
toylang_Keyword.KwdFalse = ["KwdFalse",15];
toylang_Keyword.KwdFalse.toString = $estr;
toylang_Keyword.KwdFalse.__enum__ = toylang_Keyword;
toylang_Keyword.__empty_constructs__ = [toylang_Keyword.KwdFunction,toylang_Keyword.KwdClass,toylang_Keyword.KwdVar,toylang_Keyword.KwdConst,toylang_Keyword.KwdIf,toylang_Keyword.KwdElse,toylang_Keyword.KwdWhile,toylang_Keyword.KwdBreak,toylang_Keyword.KwdContinue,toylang_Keyword.KwdReturn,toylang_Keyword.KwdNew,toylang_Keyword.KwdThis,toylang_Keyword.KwdSwitch,toylang_Keyword.KwdCase,toylang_Keyword.KwdTrue,toylang_Keyword.KwdFalse];
var toylang_Scanner = function(text,file) {
	this.text = text;
	this.file = file;
	this.pos = 0;
	this.end = text.length;
};
toylang_Scanner.__name__ = true;
toylang_Scanner.escapeString = function(s) {
	var result = "";
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var _g2 = s.charCodeAt(_g1++);
		switch(_g2) {
		case 9:
			result += "\\t";
			break;
		case 10:
			result += "\\n";
			break;
		case 13:
			result += "\\r";
			break;
		case 34:
			result += "\\\"";
			break;
		case 92:
			result += "\\\\";
			break;
		default:
			result += String.fromCharCode(_g2);
		}
	}
	return result;
};
toylang_Scanner.isIdentStart = function(ch) {
	if(!(ch == 95 || ch >= 97 && ch <= 122)) {
		if(ch >= 65) {
			return ch <= 90;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
toylang_Scanner.isIdentPart = function(ch) {
	if(!(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90)) {
		if(ch >= 48) {
			return ch <= 57;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
toylang_Scanner.isNumeric = function(ch) {
	if(ch >= 48) {
		return ch <= 57;
	} else {
		return false;
	}
};
toylang_Scanner.prototype = {
	reportError: function(msg) {
		console.log("" + msg + " at " + this.file + " ofs " + (this.pos - 1));
	}
	,scan: function() {
		while(true) {
			this.tokenPos = this.pos;
			if(this.pos >= this.end) {
				return new toylang_Token(toylang_TokenKind.TkEof,new toylang_Position(this.file,this.tokenPos,this.pos));
			}
			var ch = this.text.charCodeAt(this.pos);
			switch(ch) {
			case 9:case 10:case 13:case 32:
				this.pos++;
				continue;
				break;
			case 33:
				this.pos++;
				if(this.text.charCodeAt(this.pos) == 61) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkBangEquals,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				return new toylang_Token(toylang_TokenKind.TkBang,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 34:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkLiteral(toylang_Literal.LString(this.scanString())),new toylang_Position(this.file,this.tokenPos,this.pos));
			case 38:
				this.pos++;
				if(this.text.charCodeAt(this.pos) == 38) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkAmpAmp,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				this.reportError("Invalid character " + String.fromCharCode(ch));
				return new toylang_Token(toylang_TokenKind.TkInvalid,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 40:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkParenOpen,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 41:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkParenClose,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 42:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkAsterisk,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 43:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkPlus,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 44:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkComma,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 45:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkMinus,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 46:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkDot,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 47:
				this.pos++;
				switch(this.text.charCodeAt(this.pos)) {
				case 42:
					this.pos++;
					var closed = false;
					while(this.pos < this.end) {
						if(this.text.charCodeAt(this.pos) == 42 && this.text.charCodeAt(this.pos + 1) == 47) {
							this.pos += 2;
							closed = true;
							break;
						}
						this.pos++;
					}
					if(!closed) {
						this.reportError("Block comment not closed");
					}
					continue;
					break;
				case 47:
					this.pos++;
					while(this.pos < this.end) {
						var ch1 = this.text.charCodeAt(this.pos);
						if(ch1 == 10 || ch1 == 13) {
							break;
						}
						this.pos++;
					}
					continue;
					break;
				default:
				}
				return new toylang_Token(toylang_TokenKind.TkSlash,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				this.pos++;
				while(this.pos < this.end) {
					var ch2 = this.text.charCodeAt(this.pos);
					if(!(ch2 >= 48 && ch2 <= 57)) {
						break;
					}
					this.pos++;
				}
				return new toylang_Token(toylang_TokenKind.TkLiteral(toylang_Literal.LInt(this.text.substring(this.tokenPos,this.pos))),new toylang_Position(this.file,this.tokenPos,this.pos));
			case 58:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkColon,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 59:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkSemicolon,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 60:
				this.pos++;
				if(this.text.charCodeAt(this.pos) == 61) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkLte,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				return new toylang_Token(toylang_TokenKind.TkLt,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 61:
				this.pos++;
				var ch3 = this.text.charCodeAt(this.pos);
				if(ch3 == 61) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkEqualsEquals,new toylang_Position(this.file,this.tokenPos,this.pos));
				} else if(ch3 == 62) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkArrow,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				return new toylang_Token(toylang_TokenKind.TkEquals,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 62:
				this.pos++;
				if(this.text.charCodeAt(this.pos) == 61) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkGte,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				return new toylang_Token(toylang_TokenKind.TkGt,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 92:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkBackslash,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 123:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkBraceOpen,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 124:
				this.pos++;
				if(this.text.charCodeAt(this.pos) == 124) {
					this.pos++;
					return new toylang_Token(toylang_TokenKind.TkPipePipe,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
				this.reportError("Invalid character " + String.fromCharCode(ch));
				return new toylang_Token(toylang_TokenKind.TkInvalid,new toylang_Position(this.file,this.tokenPos,this.pos));
			case 125:
				this.pos++;
				return new toylang_Token(toylang_TokenKind.TkBraceClose,new toylang_Position(this.file,this.tokenPos,this.pos));
			default:
				if(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90) {
					this.pos++;
					while(this.pos < this.end) {
						var ch4 = this.text.charCodeAt(this.pos);
						if(!(ch4 == 95 || ch4 >= 97 && ch4 <= 122 || ch4 >= 65 && ch4 <= 90 || ch4 >= 48 && ch4 <= 57)) {
							break;
						}
						this.pos++;
					}
					return this.mkIdentOrKeyword();
				} else {
					this.pos++;
					this.reportError("Invalid character " + String.fromCharCode(ch));
					return new toylang_Token(toylang_TokenKind.TkInvalid,new toylang_Position(this.file,this.tokenPos,this.pos));
				}
			}
		}
	}
	,scanString: function() {
		var result = "";
		var start = this.pos;
		while(true) {
			if(this.pos >= this.end) {
				result += this.text.substring(start,this.pos);
				this.reportError("Unterminated string");
				break;
			}
			var ch = this.text.charCodeAt(this.pos);
			if(ch == 34) {
				result += this.text.substring(start,this.pos);
				this.pos++;
				break;
			} else if(ch == 92) {
				result += this.text.substring(start,this.pos);
				this.pos++;
				result += this.scanEscapeSequence();
				start = this.pos;
			} else {
				this.pos++;
			}
		}
		return result;
	}
	,scanEscapeSequence: function() {
		if(this.pos >= this.end) {
			this.reportError("Unterminated escape sequence");
			return "";
		}
		var ch = this.text.charCodeAt(this.pos);
		this.pos++;
		switch(ch) {
		case 34:
			return "\"";
		case 110:
			return "\n";
		case 114:
			return "\r";
		case 116:
			return "\t";
		default:
			this.reportError("Invalid escape sequence");
			return "";
		}
	}
	,mkIdentOrKeyword: function() {
		var ident = this.text.substring(this.tokenPos,this.pos);
		var _this = toylang_Scanner.keywords;
		var kwd = __map_reserved[ident] != null?_this.getReserved(ident):_this.h[ident];
		if(kwd != null) {
			return new toylang_Token(toylang_TokenKind.TkKeyword(kwd),new toylang_Position(this.file,this.tokenPos,this.pos));
		} else {
			return new toylang_Token(toylang_TokenKind.TkIdent(ident),new toylang_Position(this.file,this.tokenPos,this.pos));
		}
	}
	,mk: function(kind) {
		return new toylang_Token(kind,new toylang_Position(this.file,this.tokenPos,this.pos));
	}
	,__class__: toylang_Scanner
};
var toylang_Token = function(kind,pos) {
	this.kind = kind;
	this.pos = pos;
};
toylang_Token.__name__ = true;
toylang_Token.prototype = {
	toString: function() {
		return "{ " + Std.string(this.kind) + " | " + Std.string(this.pos) + " }";
	}
	,__class__: toylang_Token
};
var toylang_TokenKind = { __ename__ : true, __constructs__ : ["TkKeyword","TkIdent","TkLiteral","TkParenOpen","TkParenClose","TkBraceOpen","TkBraceClose","TkComma","TkDot","TkColon","TkSemicolon","TkArrow","TkEquals","TkEqualsEquals","TkBang","TkBangEquals","TkAmpAmp","TkPipePipe","TkLt","TkGt","TkLte","TkGte","TkBackslash","TkEof","TkPlus","TkMinus","TkAsterisk","TkSlash","TkInvalid"] };
toylang_TokenKind.TkKeyword = function(keyword) { var $x = ["TkKeyword",0,keyword]; $x.__enum__ = toylang_TokenKind; $x.toString = $estr; return $x; };
toylang_TokenKind.TkIdent = function(ident) { var $x = ["TkIdent",1,ident]; $x.__enum__ = toylang_TokenKind; $x.toString = $estr; return $x; };
toylang_TokenKind.TkLiteral = function(literal) { var $x = ["TkLiteral",2,literal]; $x.__enum__ = toylang_TokenKind; $x.toString = $estr; return $x; };
toylang_TokenKind.TkParenOpen = ["TkParenOpen",3];
toylang_TokenKind.TkParenOpen.toString = $estr;
toylang_TokenKind.TkParenOpen.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkParenClose = ["TkParenClose",4];
toylang_TokenKind.TkParenClose.toString = $estr;
toylang_TokenKind.TkParenClose.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkBraceOpen = ["TkBraceOpen",5];
toylang_TokenKind.TkBraceOpen.toString = $estr;
toylang_TokenKind.TkBraceOpen.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkBraceClose = ["TkBraceClose",6];
toylang_TokenKind.TkBraceClose.toString = $estr;
toylang_TokenKind.TkBraceClose.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkComma = ["TkComma",7];
toylang_TokenKind.TkComma.toString = $estr;
toylang_TokenKind.TkComma.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkDot = ["TkDot",8];
toylang_TokenKind.TkDot.toString = $estr;
toylang_TokenKind.TkDot.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkColon = ["TkColon",9];
toylang_TokenKind.TkColon.toString = $estr;
toylang_TokenKind.TkColon.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkSemicolon = ["TkSemicolon",10];
toylang_TokenKind.TkSemicolon.toString = $estr;
toylang_TokenKind.TkSemicolon.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkArrow = ["TkArrow",11];
toylang_TokenKind.TkArrow.toString = $estr;
toylang_TokenKind.TkArrow.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkEquals = ["TkEquals",12];
toylang_TokenKind.TkEquals.toString = $estr;
toylang_TokenKind.TkEquals.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkEqualsEquals = ["TkEqualsEquals",13];
toylang_TokenKind.TkEqualsEquals.toString = $estr;
toylang_TokenKind.TkEqualsEquals.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkBang = ["TkBang",14];
toylang_TokenKind.TkBang.toString = $estr;
toylang_TokenKind.TkBang.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkBangEquals = ["TkBangEquals",15];
toylang_TokenKind.TkBangEquals.toString = $estr;
toylang_TokenKind.TkBangEquals.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkAmpAmp = ["TkAmpAmp",16];
toylang_TokenKind.TkAmpAmp.toString = $estr;
toylang_TokenKind.TkAmpAmp.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkPipePipe = ["TkPipePipe",17];
toylang_TokenKind.TkPipePipe.toString = $estr;
toylang_TokenKind.TkPipePipe.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkLt = ["TkLt",18];
toylang_TokenKind.TkLt.toString = $estr;
toylang_TokenKind.TkLt.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkGt = ["TkGt",19];
toylang_TokenKind.TkGt.toString = $estr;
toylang_TokenKind.TkGt.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkLte = ["TkLte",20];
toylang_TokenKind.TkLte.toString = $estr;
toylang_TokenKind.TkLte.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkGte = ["TkGte",21];
toylang_TokenKind.TkGte.toString = $estr;
toylang_TokenKind.TkGte.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkBackslash = ["TkBackslash",22];
toylang_TokenKind.TkBackslash.toString = $estr;
toylang_TokenKind.TkBackslash.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkEof = ["TkEof",23];
toylang_TokenKind.TkEof.toString = $estr;
toylang_TokenKind.TkEof.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkPlus = ["TkPlus",24];
toylang_TokenKind.TkPlus.toString = $estr;
toylang_TokenKind.TkPlus.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkMinus = ["TkMinus",25];
toylang_TokenKind.TkMinus.toString = $estr;
toylang_TokenKind.TkMinus.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkAsterisk = ["TkAsterisk",26];
toylang_TokenKind.TkAsterisk.toString = $estr;
toylang_TokenKind.TkAsterisk.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkSlash = ["TkSlash",27];
toylang_TokenKind.TkSlash.toString = $estr;
toylang_TokenKind.TkSlash.__enum__ = toylang_TokenKind;
toylang_TokenKind.TkInvalid = ["TkInvalid",28];
toylang_TokenKind.TkInvalid.toString = $estr;
toylang_TokenKind.TkInvalid.__enum__ = toylang_TokenKind;
toylang_TokenKind.__empty_constructs__ = [toylang_TokenKind.TkParenOpen,toylang_TokenKind.TkParenClose,toylang_TokenKind.TkBraceOpen,toylang_TokenKind.TkBraceClose,toylang_TokenKind.TkComma,toylang_TokenKind.TkDot,toylang_TokenKind.TkColon,toylang_TokenKind.TkSemicolon,toylang_TokenKind.TkArrow,toylang_TokenKind.TkEquals,toylang_TokenKind.TkEqualsEquals,toylang_TokenKind.TkBang,toylang_TokenKind.TkBangEquals,toylang_TokenKind.TkAmpAmp,toylang_TokenKind.TkPipePipe,toylang_TokenKind.TkLt,toylang_TokenKind.TkGt,toylang_TokenKind.TkLte,toylang_TokenKind.TkGte,toylang_TokenKind.TkBackslash,toylang_TokenKind.TkEof,toylang_TokenKind.TkPlus,toylang_TokenKind.TkMinus,toylang_TokenKind.TkAsterisk,toylang_TokenKind.TkSlash,toylang_TokenKind.TkInvalid];
var toylang_Literal = { __ename__ : true, __constructs__ : ["LString","LInt","LBool"] };
toylang_Literal.LString = function(s) { var $x = ["LString",0,s]; $x.__enum__ = toylang_Literal; $x.toString = $estr; return $x; };
toylang_Literal.LInt = function(s) { var $x = ["LInt",1,s]; $x.__enum__ = toylang_Literal; $x.toString = $estr; return $x; };
toylang_Literal.LBool = function(b) { var $x = ["LBool",2,b]; $x.__enum__ = toylang_Literal; $x.toString = $estr; return $x; };
toylang_Literal.__empty_constructs__ = [];
var toylang_SyntaxDecl = function(module,name,pos,kind) {
	this.module = module;
	this.name = name;
	this.pos = pos;
	this.kind = kind;
};
toylang_SyntaxDecl.__name__ = true;
toylang_SyntaxDecl.prototype = {
	__class__: toylang_SyntaxDecl
};
var toylang_DeclKind = { __ename__ : true, __constructs__ : ["DFunction","DClass"] };
toylang_DeclKind.DFunction = function(fun) { var $x = ["DFunction",0,fun]; $x.__enum__ = toylang_DeclKind; $x.toString = $estr; return $x; };
toylang_DeclKind.DClass = function(cls) { var $x = ["DClass",1,cls]; $x.__enum__ = toylang_DeclKind; $x.toString = $estr; return $x; };
toylang_DeclKind.__empty_constructs__ = [];
var toylang_FunctionDecl = function() {
};
toylang_FunctionDecl.__name__ = true;
toylang_FunctionDecl.prototype = {
	__class__: toylang_FunctionDecl
};
var toylang_FunctionArg = function(name,type) {
	this.name = name;
	this.type = type;
};
toylang_FunctionArg.__name__ = true;
toylang_FunctionArg.prototype = {
	__class__: toylang_FunctionArg
};
var toylang_TypeParamDecl = function(name) {
	this.name = name;
};
toylang_TypeParamDecl.__name__ = true;
toylang_TypeParamDecl.prototype = {
	__class__: toylang_TypeParamDecl
};
var toylang_ClassDecl = function() {
};
toylang_ClassDecl.__name__ = true;
toylang_ClassDecl.prototype = {
	__class__: toylang_ClassDecl
};
var toylang_Field = function(name,kind,pos) {
	this.name = name;
	this.kind = kind;
	this.pos = pos;
	this.modifiers = [];
};
toylang_Field.__name__ = true;
toylang_Field.prototype = {
	__class__: toylang_Field
};
var toylang_FieldModifier = { __ename__ : true, __constructs__ : ["FMConst"] };
toylang_FieldModifier.FMConst = ["FMConst",0];
toylang_FieldModifier.FMConst.toString = $estr;
toylang_FieldModifier.FMConst.__enum__ = toylang_FieldModifier;
toylang_FieldModifier.__empty_constructs__ = [toylang_FieldModifier.FMConst];
var toylang_FieldKind = { __ename__ : true, __constructs__ : ["FFun","FVar"] };
toylang_FieldKind.FFun = function(fun) { var $x = ["FFun",0,fun]; $x.__enum__ = toylang_FieldKind; $x.toString = $estr; return $x; };
toylang_FieldKind.FVar = function(type,initial) { var $x = ["FVar",1,type,initial]; $x.__enum__ = toylang_FieldKind; $x.toString = $estr; return $x; };
toylang_FieldKind.__empty_constructs__ = [];
var toylang_SyntaxType = { __ename__ : true, __constructs__ : ["TPath","TTuple","TFunction","TConst"] };
toylang_SyntaxType.TPath = function(path) { var $x = ["TPath",0,path]; $x.__enum__ = toylang_SyntaxType; $x.toString = $estr; return $x; };
toylang_SyntaxType.TTuple = function(types) { var $x = ["TTuple",1,types]; $x.__enum__ = toylang_SyntaxType; $x.toString = $estr; return $x; };
toylang_SyntaxType.TFunction = function(args,returnType) { var $x = ["TFunction",2,args,returnType]; $x.__enum__ = toylang_SyntaxType; $x.toString = $estr; return $x; };
toylang_SyntaxType.TConst = function(type) { var $x = ["TConst",3,type]; $x.__enum__ = toylang_SyntaxType; $x.toString = $estr; return $x; };
toylang_SyntaxType.__empty_constructs__ = [];
var toylang_TypePath = function(module,name) {
	this.module = module;
	this.name = name;
};
toylang_TypePath.__name__ = true;
toylang_TypePath.prototype = {
	__class__: toylang_TypePath
};
var toylang_Expr = function(kind,pos) {
	this.kind = kind;
	this.pos = pos;
};
toylang_Expr.__name__ = true;
toylang_Expr.prototype = {
	__class__: toylang_Expr
};
var toylang_ExprKind = { __ename__ : true, __constructs__ : ["EBlock","EIdent","ELiteral","EField","ECall","EVar","ETuple","EParens","ENew","EIf","EArrowFunction","EWhile","EAssign","EBinop","EUnop","EBreak","EContinue","EReturn","ESwitch"] };
toylang_ExprKind.EBlock = function(exprs) { var $x = ["EBlock",0,exprs]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EIdent = function(ident) { var $x = ["EIdent",1,ident]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.ELiteral = function(literal) { var $x = ["ELiteral",2,literal]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EField = function(expr,field) { var $x = ["EField",3,expr,field]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.ECall = function(expr,args) { var $x = ["ECall",4,expr,args]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EVar = function(binding,type,initial) { var $x = ["EVar",5,binding,type,initial]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.ETuple = function(exprs) { var $x = ["ETuple",6,exprs]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EParens = function(expr) { var $x = ["EParens",7,expr]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.ENew = function(path) { var $x = ["ENew",8,path]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EIf = function(cond,then,els) { var $x = ["EIf",9,cond,then,els]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EArrowFunction = function(args,ret,expr) { var $x = ["EArrowFunction",10,args,ret,expr]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EWhile = function(cond,body) { var $x = ["EWhile",11,cond,body]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EAssign = function(left,right) { var $x = ["EAssign",12,left,right]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EBinop = function(op,left,right) { var $x = ["EBinop",13,op,left,right]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EUnop = function(op,expr,postfix) { var $x = ["EUnop",14,op,expr,postfix]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.EBreak = ["EBreak",15];
toylang_ExprKind.EBreak.toString = $estr;
toylang_ExprKind.EBreak.__enum__ = toylang_ExprKind;
toylang_ExprKind.EContinue = ["EContinue",16];
toylang_ExprKind.EContinue.toString = $estr;
toylang_ExprKind.EContinue.__enum__ = toylang_ExprKind;
toylang_ExprKind.EReturn = function(e) { var $x = ["EReturn",17,e]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.ESwitch = function(expr,cases) { var $x = ["ESwitch",18,expr,cases]; $x.__enum__ = toylang_ExprKind; $x.toString = $estr; return $x; };
toylang_ExprKind.__empty_constructs__ = [toylang_ExprKind.EBreak,toylang_ExprKind.EContinue];
var toylang_VarBinding = { __ename__ : true, __constructs__ : ["VName","VTuple"] };
toylang_VarBinding.VName = function(name) { var $x = ["VName",0,name]; $x.__enum__ = toylang_VarBinding; $x.toString = $estr; return $x; };
toylang_VarBinding.VTuple = function(binds) { var $x = ["VTuple",1,binds]; $x.__enum__ = toylang_VarBinding; $x.toString = $estr; return $x; };
toylang_VarBinding.__empty_constructs__ = [];
var toylang_Case = function(pattern,expr) {
	this.pattern = pattern;
	this.expr = expr;
};
toylang_Case.__name__ = true;
toylang_Case.prototype = {
	__class__: toylang_Case
};
var toylang_SyntaxEdge = { __ename__ : true, __constructs__ : ["SEBranch","SESwitch","SELoop","SENone"] };
toylang_SyntaxEdge.SEBranch = function(bbThen,bbElse,bbNext) { var $x = ["SEBranch",0,bbThen,bbElse,bbNext]; $x.__enum__ = toylang_SyntaxEdge; $x.toString = $estr; return $x; };
toylang_SyntaxEdge.SESwitch = function(cases,bbDefault,bbNext) { var $x = ["SESwitch",1,cases,bbDefault,bbNext]; $x.__enum__ = toylang_SyntaxEdge; $x.toString = $estr; return $x; };
toylang_SyntaxEdge.SELoop = function(head,bbBody,bbNext) { var $x = ["SELoop",2,head,bbBody,bbNext]; $x.__enum__ = toylang_SyntaxEdge; $x.toString = $estr; return $x; };
toylang_SyntaxEdge.SENone = ["SENone",3];
toylang_SyntaxEdge.SENone.toString = $estr;
toylang_SyntaxEdge.SENone.__enum__ = toylang_SyntaxEdge;
toylang_SyntaxEdge.__empty_constructs__ = [toylang_SyntaxEdge.SENone];
var toylang_TDecl = { __ename__ : true, __constructs__ : ["TDFunction","TDClass"] };
toylang_TDecl.TDFunction = function(f) { var $x = ["TDFunction",0,f]; $x.__enum__ = toylang_TDecl; $x.toString = $estr; return $x; };
toylang_TDecl.TDClass = function(c) { var $x = ["TDClass",1,c]; $x.__enum__ = toylang_TDecl; $x.toString = $estr; return $x; };
toylang_TDecl.__empty_constructs__ = [];
var toylang_TBaseDecl = function() {
};
toylang_TBaseDecl.__name__ = true;
toylang_TBaseDecl.prototype = {
	__class__: toylang_TBaseDecl
};
var toylang_TClassDecl = function() {
	toylang_TBaseDecl.call(this);
};
toylang_TClassDecl.__name__ = true;
toylang_TClassDecl.__super__ = toylang_TBaseDecl;
toylang_TClassDecl.prototype = $extend(toylang_TBaseDecl.prototype,{
	getField: function(name) {
		var _g = 0;
		var _g1 = this.fields;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.name == name) {
				return f;
			}
		}
		return null;
	}
	,__class__: toylang_TClassDecl
});
var toylang_TFunctionDecl = function() {
	toylang_TBaseDecl.call(this);
};
toylang_TFunctionDecl.__name__ = true;
toylang_TFunctionDecl.__super__ = toylang_TBaseDecl;
toylang_TFunctionDecl.prototype = $extend(toylang_TBaseDecl.prototype,{
	__class__: toylang_TFunctionDecl
});
var toylang_TFunctionArg = function(name,type) {
	this.name = name;
	this.type = type;
};
toylang_TFunctionArg.__name__ = true;
toylang_TFunctionArg.prototype = {
	__class__: toylang_TFunctionArg
};
var toylang_TClassField = function(name,kind,type,pos) {
	this.name = name;
	this.kind = kind;
	this.type = type;
	this.pos = pos;
};
toylang_TClassField.__name__ = true;
toylang_TClassField.prototype = {
	__class__: toylang_TClassField
};
var toylang_TClassFieldKind = { __ename__ : true, __constructs__ : ["FVar","FMethod"] };
toylang_TClassFieldKind.FVar = ["FVar",0];
toylang_TClassFieldKind.FVar.toString = $estr;
toylang_TClassFieldKind.FVar.__enum__ = toylang_TClassFieldKind;
toylang_TClassFieldKind.FMethod = function(isConst) { var $x = ["FMethod",1,isConst]; $x.__enum__ = toylang_TClassFieldKind; $x.toString = $estr; return $x; };
toylang_TClassFieldKind.__empty_constructs__ = [toylang_TClassFieldKind.FVar];
var toylang_Type = { __ename__ : true, __constructs__ : ["TMono","TInst","TFun","TTuple","TConst"] };
toylang_Type.TMono = function(m) { var $x = ["TMono",0,m]; $x.__enum__ = toylang_Type; $x.toString = $estr; return $x; };
toylang_Type.TInst = function(c) { var $x = ["TInst",1,c]; $x.__enum__ = toylang_Type; $x.toString = $estr; return $x; };
toylang_Type.TFun = function(args,ret) { var $x = ["TFun",2,args,ret]; $x.__enum__ = toylang_Type; $x.toString = $estr; return $x; };
toylang_Type.TTuple = function(types) { var $x = ["TTuple",3,types]; $x.__enum__ = toylang_Type; $x.toString = $estr; return $x; };
toylang_Type.TConst = function(t) { var $x = ["TConst",4,t]; $x.__enum__ = toylang_Type; $x.toString = $estr; return $x; };
toylang_Type.__empty_constructs__ = [];
var toylang_Monomorph = function() {
};
toylang_Monomorph.__name__ = true;
toylang_Monomorph.prototype = {
	resolve: function(type) {
		if(this.type != null) {
			throw new js__$Boot_HaxeError("Monomorph already resolved");
		}
		this.type = type;
	}
	,__class__: toylang_Monomorph
};
var toylang_TExpr = function(kind,type,pos) {
	this.kind = kind;
	this.type = type;
	this.pos = pos;
};
toylang_TExpr.__name__ = true;
toylang_TExpr.prototype = {
	__class__: toylang_TExpr
};
var toylang_TVar = function(name,type) {
	this.name = name;
	this.type = type;
};
toylang_TVar.__name__ = true;
toylang_TVar.prototype = {
	__class__: toylang_TVar
};
var toylang_TExprKind = { __ename__ : true, __constructs__ : ["TThis","TTuple","TTupleElement","TVar","TLocal","TMethodClosure","TVarField","TCall","TMethodCall","TLiteral","TReturn","TFunction","TAssign","TNew","TBinop","TUnop","TFakeValue"] };
toylang_TExprKind.TThis = ["TThis",0];
toylang_TExprKind.TThis.toString = $estr;
toylang_TExprKind.TThis.__enum__ = toylang_TExprKind;
toylang_TExprKind.TTuple = function(exprs) { var $x = ["TTuple",1,exprs]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TTupleElement = function(etuple,index) { var $x = ["TTupleElement",2,etuple,index]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TVar = function(v,einitial) { var $x = ["TVar",3,v,einitial]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TLocal = function(v) { var $x = ["TLocal",4,v]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TMethodClosure = function(e,f) { var $x = ["TMethodClosure",5,e,f]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TVarField = function(e,f) { var $x = ["TVarField",6,e,f]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TCall = function(e,args) { var $x = ["TCall",7,e,args]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TMethodCall = function(eobj,f,args) { var $x = ["TMethodCall",8,eobj,f,args]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TLiteral = function(l) { var $x = ["TLiteral",9,l]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TReturn = function(e) { var $x = ["TReturn",10,e]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TFunction = function(args,ret,cfg) { var $x = ["TFunction",11,args,ret,cfg]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TAssign = function(target,value) { var $x = ["TAssign",12,target,value]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TNew = function(cls) { var $x = ["TNew",13,cls]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TBinop = function(op,left,right) { var $x = ["TBinop",14,op,left,right]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TUnop = function(op,expr,postfix) { var $x = ["TUnop",15,op,expr,postfix]; $x.__enum__ = toylang_TExprKind; $x.toString = $estr; return $x; };
toylang_TExprKind.TFakeValue = ["TFakeValue",16];
toylang_TExprKind.TFakeValue.toString = $estr;
toylang_TExprKind.TFakeValue.__enum__ = toylang_TExprKind;
toylang_TExprKind.__empty_constructs__ = [toylang_TExprKind.TThis,toylang_TExprKind.TFakeValue];
var toylang_AssignTarget = { __ename__ : true, __constructs__ : ["ATVar","ATField"] };
toylang_AssignTarget.ATVar = function(v) { var $x = ["ATVar",0,v]; $x.__enum__ = toylang_AssignTarget; $x.toString = $estr; return $x; };
toylang_AssignTarget.ATField = function(obj,f) { var $x = ["ATField",1,obj,f]; $x.__enum__ = toylang_AssignTarget; $x.toString = $estr; return $x; };
toylang_AssignTarget.__empty_constructs__ = [];
var toylang_TLiteral = { __ename__ : true, __constructs__ : ["LString","LInt","LBool"] };
toylang_TLiteral.LString = function(s) { var $x = ["LString",0,s]; $x.__enum__ = toylang_TLiteral; $x.toString = $estr; return $x; };
toylang_TLiteral.LInt = function(i) { var $x = ["LInt",1,i]; $x.__enum__ = toylang_TLiteral; $x.toString = $estr; return $x; };
toylang_TLiteral.LBool = function(b) { var $x = ["LBool",2,b]; $x.__enum__ = toylang_TLiteral; $x.toString = $estr; return $x; };
toylang_TLiteral.__empty_constructs__ = [];
var toylang_FieldAccess = { __ename__ : true, __constructs__ : ["FClassField"] };
toylang_FieldAccess.FClassField = function(c,f) { var $x = ["FClassField",0,c,f]; $x.__enum__ = toylang_FieldAccess; $x.toString = $estr; return $x; };
toylang_FieldAccess.__empty_constructs__ = [];
var toylang_TyperError = function(message,pos) {
	this.message = message;
	this.pos = pos;
};
toylang_TyperError.__name__ = true;
toylang_TyperError.prototype = {
	toString: function() {
		return "" + Std.string(this.pos) + ": " + Std.string(this.message);
	}
	,__class__: toylang_TyperError
};
var toylang_TyperErrorMessage = { __ename__ : true, __constructs__ : ["UnresolvedIdentifier","UnificationError","InsufficientArguments","TooManyArguments","TypeIsNotCallable","CouldntInferArgumentType","CouldntInferReturnType","InsufficientTupleElements","TooManyTupleElements","TypeNotFound","FieldNotFound","Immutable","InvalidAssignment","ComplexVariableBindingMustHaveInitialValue","MatchNotExhaustive"] };
toylang_TyperErrorMessage.UnresolvedIdentifier = function(ident) { var $x = ["UnresolvedIdentifier",0,ident]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.UnificationError = function(a,b) { var $x = ["UnificationError",1,a,b]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.InsufficientArguments = function(remainingArgs) { var $x = ["InsufficientArguments",2,remainingArgs]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.TooManyArguments = ["TooManyArguments",3];
toylang_TyperErrorMessage.TooManyArguments.toString = $estr;
toylang_TyperErrorMessage.TooManyArguments.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.TypeIsNotCallable = function(t) { var $x = ["TypeIsNotCallable",4,t]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.CouldntInferArgumentType = function(argName) { var $x = ["CouldntInferArgumentType",5,argName]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.CouldntInferReturnType = ["CouldntInferReturnType",6];
toylang_TyperErrorMessage.CouldntInferReturnType.toString = $estr;
toylang_TyperErrorMessage.CouldntInferReturnType.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.InsufficientTupleElements = function(remainingTypes) { var $x = ["InsufficientTupleElements",7,remainingTypes]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.TooManyTupleElements = ["TooManyTupleElements",8];
toylang_TyperErrorMessage.TooManyTupleElements.toString = $estr;
toylang_TyperErrorMessage.TooManyTupleElements.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.TypeNotFound = function(module,name) { var $x = ["TypeNotFound",9,module,name]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.FieldNotFound = function(type,name) { var $x = ["FieldNotFound",10,type,name]; $x.__enum__ = toylang_TyperErrorMessage; $x.toString = $estr; return $x; };
toylang_TyperErrorMessage.Immutable = ["Immutable",11];
toylang_TyperErrorMessage.Immutable.toString = $estr;
toylang_TyperErrorMessage.Immutable.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.InvalidAssignment = ["InvalidAssignment",12];
toylang_TyperErrorMessage.InvalidAssignment.toString = $estr;
toylang_TyperErrorMessage.InvalidAssignment.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.ComplexVariableBindingMustHaveInitialValue = ["ComplexVariableBindingMustHaveInitialValue",13];
toylang_TyperErrorMessage.ComplexVariableBindingMustHaveInitialValue.toString = $estr;
toylang_TyperErrorMessage.ComplexVariableBindingMustHaveInitialValue.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.MatchNotExhaustive = ["MatchNotExhaustive",14];
toylang_TyperErrorMessage.MatchNotExhaustive.toString = $estr;
toylang_TyperErrorMessage.MatchNotExhaustive.__enum__ = toylang_TyperErrorMessage;
toylang_TyperErrorMessage.__empty_constructs__ = [toylang_TyperErrorMessage.TooManyArguments,toylang_TyperErrorMessage.CouldntInferReturnType,toylang_TyperErrorMessage.TooManyTupleElements,toylang_TyperErrorMessage.Immutable,toylang_TyperErrorMessage.InvalidAssignment,toylang_TyperErrorMessage.ComplexVariableBindingMustHaveInitialValue,toylang_TyperErrorMessage.MatchNotExhaustive];
var toylang_LoopContext = function(head,next) {
	this.head = head;
	this.next = next;
};
toylang_LoopContext.__name__ = true;
toylang_LoopContext.prototype = {
	__class__: toylang_LoopContext
};
var toylang_Typer = function() {
	this.typeCache = new haxe_ds_StringMap();
	this.localsStack = new haxe_ds_GenericStack();
	this.thisStack = new haxe_ds_GenericStack();
	var _g = 0;
	var _g1 = ["Void","String","Int","Bool"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var decl = new toylang_ClassDecl();
		decl.fields = [];
		this.typeClass(decl,name,toylang_Position.nullPos);
	}
	this.tVoid = this.typeType(toylang_SyntaxType.TPath(new toylang_TypePath([],"Void")),toylang_Position.nullPos);
	this.tString = this.typeType(toylang_SyntaxType.TPath(new toylang_TypePath([],"String")),toylang_Position.nullPos);
	this.tInt = this.typeType(toylang_SyntaxType.TPath(new toylang_TypePath([],"Int")),toylang_Position.nullPos);
	this.tBool = this.typeType(toylang_SyntaxType.TPath(new toylang_TypePath([],"Bool")),toylang_Position.nullPos);
	var locals = new haxe_ds_StringMap();
	var _this = this.localsStack;
	_this.head = new haxe_ds_GenericCell(locals,_this.head);
	var v = new toylang_TVar("trace",toylang_Type.TFun([new toylang_TFunctionArg("str",this.tString)],this.tVoid));
	if(__map_reserved["trace"] != null) {
		locals.setReserved("trace",v);
	} else {
		locals.h["trace"] = v;
	}
	var v1 = new toylang_TVar("monoFun",toylang_Type.TMono(new toylang_Monomorph()));
	if(__map_reserved["monoFun"] != null) {
		locals.setReserved("monoFun",v1);
	} else {
		locals.h["monoFun"] = v1;
	}
};
toylang_Typer.__name__ = true;
toylang_Typer.mkMono = function() {
	return toylang_Type.TMono(new toylang_Monomorph());
};
toylang_Typer.isMono = function(t) {
	if(t[1] == 0) {
		var m = t[2];
		if(m.type == null) {
			return true;
		} else {
			return toylang_Typer.isMono(m.type);
		}
	} else {
		return false;
	}
};
toylang_Typer.follow = function(a) {
	if(a[1] == 0) {
		var m = a[2];
		if(m.type != null) {
			return toylang_Typer.follow(m.type);
		} else {
			return a;
		}
	} else {
		return a;
	}
};
toylang_Typer.unifyThrow = function(a,b,pos) {
	if(!toylang_Typer.unify(a,b)) {
		throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.UnificationError(a,b),pos));
	}
};
toylang_Typer.unify = function(a,b) {
	if(a == b) {
		return true;
	}
	switch(a[1]) {
	case 0:
		var ma = a[2];
		if(ma.type == null) {
			ma.resolve(b);
			return true;
		} else {
			return toylang_Typer.unify(ma.type,b);
		}
		break;
	case 1:
		switch(b[1]) {
		case 0:
			var mb = b[2];
			if(mb.type == null) {
				mb.resolve(a);
				return true;
			} else {
				return toylang_Typer.unify(a,mb.type);
			}
			break;
		case 1:
			return a[2] == b[2];
		case 4:
			return toylang_Typer.unify(a,b[2]);
		default:
			return false;
		}
		break;
	case 2:
		switch(b[1]) {
		case 0:
			var mb1 = b[2];
			if(mb1.type == null) {
				mb1.resolve(a);
				return true;
			} else {
				return toylang_Typer.unify(a,mb1.type);
			}
			break;
		case 2:
			var aargs = a[2];
			var bargs = b[2];
			if(aargs.length == bargs.length) {
				if(!toylang_Typer.unify(a[3],b[3])) {
					return false;
				} else {
					var _g1 = 0;
					var _g = aargs.length;
					while(_g1 < _g) {
						var i = _g1++;
						if(!toylang_Typer.unify(bargs[i].type,aargs[i].type)) {
							return false;
						}
					}
					return true;
				}
			} else {
				return false;
			}
			break;
		case 4:
			return toylang_Typer.unify(a,b[2]);
		default:
			return false;
		}
		break;
	case 3:
		switch(b[1]) {
		case 0:
			var mb2 = b[2];
			if(mb2.type == null) {
				mb2.resolve(a);
				return true;
			} else {
				return toylang_Typer.unify(a,mb2.type);
			}
			break;
		case 3:
			var ta = a[2];
			var tb = b[2];
			if(ta.length == tb.length) {
				var result = true;
				var _g11 = 0;
				var _g2 = ta.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(!toylang_Typer.unify(ta[i1],tb[i1])) {
						result = false;
						break;
					}
				}
				return result;
			} else {
				return false;
			}
			break;
		case 4:
			return toylang_Typer.unify(a,b[2]);
		default:
			return false;
		}
		break;
	case 4:
		switch(b[1]) {
		case 0:
			var mb3 = b[2];
			if(mb3.type == null) {
				mb3.resolve(a);
				return true;
			} else {
				return toylang_Typer.unify(a,mb3.type);
			}
			break;
		case 4:
			return toylang_Typer.unify(a[2],b[2]);
		default:
			return false;
		}
		break;
	default:
		switch(b[1]) {
		case 0:
			var mb4 = b[2];
			if(mb4.type == null) {
				mb4.resolve(a);
				return true;
			} else {
				return toylang_Typer.unify(a,mb4.type);
			}
			break;
		case 4:
			return toylang_Typer.unify(a,b[2]);
		default:
			return false;
		}
	}
};
toylang_Typer.prototype = {
	typeSyntaxDecl: function(decl) {
		var _g = decl.kind;
		switch(_g[1]) {
		case 0:
			return toylang_TDecl.TDFunction(this.typeFunctionDecl(_g[2],decl.pos));
		case 1:
			return this.typeClass(_g[2],decl.name,decl.pos);
		}
	}
	,typeType: function(t,pos) {
		if(t == null) {
			return toylang_Type.TMono(new toylang_Monomorph());
		}
		switch(t[1]) {
		case 0:
			var path = t[2];
			var decl = this.loadType(path.module,path.name,pos);
			switch(decl[1]) {
			case 0:
				throw new js__$Boot_HaxeError(false);
				break;
			case 1:
				return toylang_Type.TInst(decl[2]);
			}
			break;
		case 1:
			var types = t[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < types.length) {
				var t1 = types[_g1];
				++_g1;
				_g.push(this.typeType(t1,pos));
			}
			return toylang_Type.TTuple(_g);
		case 2:
			var ret = t[3];
			var args = t[2];
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < args.length) {
				var a = args[_g11];
				++_g11;
				_g2.push(new toylang_TFunctionArg(a.name,this.typeType(a.type,pos)));
			}
			return toylang_Type.TFun(_g2,this.typeType(ret,pos));
		case 3:
			return toylang_Type.TConst(this.typeType(t[2],pos));
		}
	}
	,typeFunctionDecl: function(fun,pos) {
		var decl = new toylang_TFunctionDecl();
		decl.module = [];
		decl.name = fun.name;
		decl.pos = pos;
		decl.ret = this.typeType(fun.ret,pos);
		decl.args = [];
		if(fun.expr != null) {
			var locals = new haxe_ds_StringMap();
			var _this = this.localsStack;
			_this.head = new haxe_ds_GenericCell(locals,_this.head);
			var _g = 0;
			var _g1 = fun.args;
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				var type = this.typeType(arg.type,pos);
				decl.args.push(new toylang_TFunctionArg(arg.name,type));
				var k = arg.name;
				var v = new toylang_TVar(arg.name,type);
				if(__map_reserved[k] != null) {
					locals.setReserved(k,v);
				} else {
					locals.h[k] = v;
				}
			}
			this.tmpCount = 0;
			this.loopStack = new haxe_ds_GenericStack();
			this.bbUnreachable = new toylang_UnreachableBlock();
			var bbRoot = new toylang_BasicBlock();
			this.block(bbRoot,fun.expr);
			decl.cfg = bbRoot;
			var _this1 = this.localsStack;
			var k1 = _this1.head;
			if(k1 != null) {
				_this1.head = k1.next;
			}
			var _g2 = 0;
			var _g11 = decl.args;
			while(_g2 < _g11.length) {
				var arg1 = _g11[_g2];
				++_g2;
				if(toylang_Typer.isMono(arg1.type)) {
					throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.CouldntInferArgumentType(arg1.name),decl.pos));
				}
			}
			if(toylang_Typer.isMono(decl.ret)) {
				toylang_Typer.unify(decl.ret,this.tVoid);
			}
		} else {
			var _g3 = 0;
			var _g12 = fun.args;
			while(_g3 < _g12.length) {
				var arg2 = _g12[_g3];
				++_g3;
				var type1 = this.typeType(arg2.type,pos);
				decl.args.push(new toylang_TFunctionArg(arg2.name,type1));
			}
		}
		return decl;
	}
	,block: function(bb,e) {
		var exprs;
		var _g = e.kind;
		if(_g[1] == 0) {
			exprs = _g[2];
		} else {
			exprs = [e];
		}
		var _g1 = 0;
		while(_g1 < exprs.length) {
			var e1 = exprs[_g1];
			++_g1;
			bb = this.blockElement(bb,e1);
		}
		return bb;
	}
	,declareVar: function(bb,name,type,pos,einit) {
		var v = new toylang_TVar(name,type);
		var _this = this.localsStack;
		var _this1 = _this.head == null?null:_this.head.elt;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,v);
		} else {
			_this1.h[name] = v;
		}
		bb.elements.push(new toylang_TExpr(toylang_TExprKind.TVar(v,einit),this.tVoid,pos));
		return v;
	}
	,assignVar: function(bb,v,e,pos) {
		toylang_Typer.unifyThrow(e.type,v.type,pos);
		bb.elements.push(new toylang_TExpr(toylang_TExprKind.TAssign(toylang_AssignTarget.ATVar(v),e),v.type,pos));
	}
	,typeLiteral: function(l,pos) {
		switch(l[1]) {
		case 0:
			return new toylang_TExpr(toylang_TExprKind.TLiteral(toylang_TLiteral.LString(l[2])),this.tString,pos);
		case 1:
			var i = Std.parseInt(l[2]);
			if(i == null) {
				throw new js__$Boot_HaxeError("Invalid integer " + i);
			}
			return new toylang_TExpr(toylang_TExprKind.TLiteral(toylang_TLiteral.LInt(i)),this.tInt,pos);
		case 2:
			return new toylang_TExpr(toylang_TExprKind.TLiteral(toylang_TLiteral.LBool(l[2])),this.tBool,pos);
		}
	}
	,value: function(bb,e) {
		var _gthis = this;
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(_g[2].length == 0) {
				throw new js__$Boot_HaxeError("empty blocks are not allowed in a value place");
			} else {
				var el = _g[2];
				var last = el[el.length - 1];
				var _this = this.localsStack;
				_this.head = new haxe_ds_GenericCell(new haxe_ds_StringMap(),_this.head);
				var _g1 = 0;
				var _g2 = el.length - 1;
				while(_g1 < _g2) bb = this.blockElement(bb,el[_g1++]);
				var r = this.value(bb,last);
				var _this1 = this.localsStack;
				var k = _this1.head;
				if(k != null) {
					_this1.head = k.next;
				}
				return r;
			}
			break;
		case 1:
			return { bb : bb, expr : this.resolveIdent(_g[2],e.pos)};
		case 2:
			return { bb : bb, expr : this.typeLiteral(_g[2],e.pos)};
		case 3:
			var r1 = this.value(bb,_g[2]);
			return { bb : r1.bb, expr : this.typeField(r1.expr,_g[3],e.pos)};
		case 4:
			return this.call(bb,_g[2],_g[3],e.pos);
		case 5:
			throw new js__$Boot_HaxeError("var declaration is not allowed in a value place");
			break;
		case 6:
			var exprs = _g[2];
			var types = [];
			var typedExprs = [];
			var _g3 = 0;
			while(_g3 < exprs.length) {
				var e1 = exprs[_g3];
				++_g3;
				var r2 = this.value(bb,e1);
				bb = r2.bb;
				typedExprs.push(r2.expr);
				types.push(r2.expr.type);
			}
			return { bb : bb, expr : new toylang_TExpr(toylang_TExprKind.TTuple(typedExprs),toylang_Type.TTuple(types),e.pos)};
		case 7:
			return this.value(bb,_g[2]);
		case 8:
			var path = _g[2];
			var tdecl = this.loadType(path.module,path.name,e.pos);
			var expr;
			switch(tdecl[1]) {
			case 0:
				throw new js__$Boot_HaxeError(false);
				break;
			case 1:
				var cl = tdecl[2];
				expr = new toylang_TExpr(toylang_TExprKind.TNew(cl),toylang_Type.TInst(cl),e.pos);
				break;
			}
			return { bb : bb, expr : expr};
		case 9:
			var eelse = _g[4];
			if(eelse == null) {
				throw new js__$Boot_HaxeError("if in a value place must have else branch");
			}
			var type = toylang_Type.TMono(new toylang_Monomorph());
			var tmpVar = this.declareVar(bb,"tmpIfElseResult" + this.tmpCount++,type,e.pos);
			var r3 = this.value(bb,_g[2]);
			r3.bb.elements.push(r3.expr);
			var bbNext = new toylang_BasicBlock();
			var bbThen = new toylang_BasicBlock();
			var bbElse = new toylang_BasicBlock();
			r3.bb.addEdge(bbThen,"then");
			var r4 = this.value(bbThen,_g[3]);
			toylang_Typer.unifyThrow(r4.expr.type,type,e.pos);
			this.assignVar(r4.bb,tmpVar,r4.expr,e.pos);
			r4.bb.addEdge(bbNext,"next");
			r3.bb.addEdge(bbElse,"else");
			var r5 = this.value(bbElse,eelse);
			toylang_Typer.unifyThrow(r5.expr.type,type,e.pos);
			this.assignVar(r5.bb,tmpVar,r5.expr,e.pos);
			r5.bb.addEdge(bbNext,"next");
			r3.bb.syntaxEdge = toylang_SyntaxEdge.SEBranch(bbThen,bbElse,bbNext);
			return { bb : bbNext, expr : new toylang_TExpr(toylang_TExprKind.TLocal(tmpVar),tmpVar.type,e.pos)};
		case 10:
			var expr1 = _g[4];
			var ret = _g[3];
			var args = _g[2];
			var locals = new haxe_ds_StringMap();
			var _this2 = this.localsStack;
			_this2.head = new haxe_ds_GenericCell(locals,_this2.head);
			var typedArgs = [];
			var _g4 = 0;
			while(_g4 < args.length) {
				var arg = args[_g4];
				++_g4;
				var type1 = this.typeType(arg.type,e.pos);
				typedArgs.push(new toylang_TFunctionArg(arg.name,type1));
				var k1 = arg.name;
				var v = new toylang_TVar(arg.name,type1);
				if(__map_reserved[k1] != null) {
					locals.setReserved(k1,v);
				} else {
					locals.h[k1] = v;
				}
			}
			var oldLoopStack = this.loopStack;
			this.loopStack = new haxe_ds_GenericStack();
			var bbRoot = new toylang_BasicBlock();
			this.block(bbRoot,new toylang_Expr(toylang_ExprKind.EReturn(expr1),expr1.pos));
			var _this3 = this.localsStack;
			var k2 = _this3.head;
			if(k2 != null) {
				_this3.head = k2.next;
			}
			this.loopStack = oldLoopStack;
			var ret1 = this.typeType(ret,e.pos);
			return { bb : bb, expr : new toylang_TExpr(toylang_TExprKind.TFunction(typedArgs,ret1,bbRoot),toylang_Type.TFun(typedArgs,ret1),e.pos)};
		case 11:
			throw new js__$Boot_HaxeError("while loop is not allowed in a value place");
			break;
		case 12:
			var r6 = this.value(bb,_g[2]);
			bb = r6.bb;
			var left = r6.expr;
			var r7 = this.value(bb,_g[3]);
			bb = r7.bb;
			var right = r7.expr;
			var kind;
			var _g5 = left.kind;
			switch(_g5[1]) {
			case 4:
				kind = toylang_TExprKind.TAssign(toylang_AssignTarget.ATVar(_g5[2]),right);
				break;
			case 6:
				var obj = _g5[2];
				if(obj.type[1] == 4) {
					throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.Immutable,e.pos));
				}
				kind = toylang_TExprKind.TAssign(toylang_AssignTarget.ATField(obj,_g5[3]),right);
				break;
			default:
				throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.InvalidAssignment,e.pos));
			}
			toylang_Typer.unifyThrow(right.type,left.type,e.pos);
			return { bb : bb, expr : new toylang_TExpr(kind,left.type,e.pos)};
		case 13:
			switch(_g[2][1]) {
			case 10:
				return this.value(bb,new toylang_Expr(toylang_ExprKind.EIf(_g[3],_g[4],new toylang_Expr(toylang_ExprKind.EIdent("false"),e.pos)),e.pos));
			case 11:
				return this.value(bb,new toylang_Expr(toylang_ExprKind.EIf(new toylang_Expr(toylang_ExprKind.EUnop(toylang_Unop.OpNot,_g[3],false),e.pos),_g[4],new toylang_Expr(toylang_ExprKind.EIdent("true"),e.pos)),e.pos));
			default:
				var op = _g[2];
				var r8 = this.value(bb,_g[3]);
				bb = r8.bb;
				var left1 = r8.expr;
				var r9 = this.value(bb,_g[4]);
				bb = r9.bb;
				var right1 = r9.expr;
				toylang_Typer.unifyThrow(right1.type,left1.type,e.pos);
				var type2;
				switch(op[1]) {
				case 2:case 3:case 4:case 5:
					type2 = left1.type;
					break;
				case 0:case 1:case 6:case 7:case 8:case 9:
					type2 = this.tBool;
					break;
				default:
					throw new js__$Boot_HaxeError("&& and || are handled above");
				}
				return { bb : bb, expr : new toylang_TExpr(toylang_TExprKind.TBinop(op,left1,right1),type2,e.pos)};
			}
			break;
		case 14:
			var postfix = _g[4];
			var op1 = _g[2];
			var r10 = this.value(bb,_g[3]);
			var type3;
			switch(op1[1]) {
			case 0:
				if(postfix == false) {
					toylang_Typer.unifyThrow(r10.expr.type,this.tBool,e.pos);
					type3 = this.tBool;
				} else {
					throw new js__$Boot_HaxeError("Unsupported operator " + Std.string(op1) + " (postfix=" + (postfix == null?"null":"" + postfix) + ")");
				}
				break;
			case 1:
				if(postfix == false) {
					toylang_Typer.unifyThrow(r10.expr.type,this.tInt,e.pos);
					type3 = this.tInt;
				} else {
					throw new js__$Boot_HaxeError("Unsupported operator " + Std.string(op1) + " (postfix=" + (postfix == null?"null":"" + postfix) + ")");
				}
				break;
			}
			return { bb : r10.bb, expr : new toylang_TExpr(toylang_TExprKind.TUnop(op1,r10.expr,postfix),type3,e.pos)};
		case 15:case 16:case 17:
			return { bb : this.blockElement(bb,e), expr : new toylang_TExpr(toylang_TExprKind.TFakeValue,toylang_Type.TMono(new toylang_Monomorph()),e.pos)};
		case 18:
			var tmpResultVar = this.declareVar(bb,"tmpSwitchResult" + this.tmpCount++,toylang_Type.TMono(new toylang_Monomorph()),e.pos);
			var tmpVar1 = this.declareVar(bb,"tmpSwitchSubject" + this.tmpCount++,toylang_Type.TMono(new toylang_Monomorph()),e.pos);
			var r11 = this.value(bb,_g[2]);
			this.assignVar(r11.bb,tmpVar1,r11.expr,e.pos);
			var dt = new toylang_Matcher(this).match(new toylang_TExpr(toylang_TExprKind.TLocal(tmpVar1),tmpVar1.type,e.pos),_g[3]);
			toylang_Matcher.makeDTGraph(dt);
			return { bb : this.pattern(r11.bb,dt,e.pos,function(bb1,expr2) {
				var r12 = _gthis.value(bb1,expr2);
				_gthis.assignVar(r12.bb,tmpResultVar,r12.expr,expr2.pos);
				return r12.bb;
			}), expr : new toylang_TExpr(toylang_TExprKind.TLocal(tmpResultVar),tmpResultVar.type,e.pos)};
		}
	}
	,pattern: function(bb,dt,pos,processLeaf) {
		switch(dt[1]) {
		case 0:
			throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.MatchNotExhaustive,pos));
			break;
		case 1:
			return processLeaf(bb,dt[2]);
		case 2:
			var def = dt[4];
			var cases = dt[3];
			bb.elements.push(dt[2]);
			var bbNext = new toylang_BasicBlock();
			var cfgCases = [];
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var bbCase = new toylang_BasicBlock();
				bb.addEdge(bbCase,"case " + Std.string(c.ctor));
				this.pattern(bbCase,c.dt,pos,processLeaf).addEdge(bbNext,"next");
				var l = c.ctor[2];
				var t;
				switch(l[1]) {
				case 0:
					t = this.tString;
					break;
				case 1:
					t = this.tInt;
					break;
				case 2:
					t = this.tBool;
					break;
				}
				cfgCases.push({ expr : new toylang_TExpr(toylang_TExprKind.TLiteral(l),t,pos), body : bbCase});
			}
			var bbDef = null;
			if(def != null) {
				bbDef = new toylang_BasicBlock();
				bb.addEdge(bbDef,"default");
				this.pattern(bbDef,def,pos,processLeaf).addEdge(bbNext,"next");
			}
			bb.syntaxEdge = toylang_SyntaxEdge.SESwitch(cfgCases,bbDef,bbNext);
			return bbNext;
		}
	}
	,blockElement: function(bb,e) {
		var _gthis = this;
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(_g[2].length == 0) {
				return bb;
			} else {
				var exprs = _g[2];
				var _this = this.localsStack;
				_this.head = new haxe_ds_GenericCell(new haxe_ds_StringMap(),_this.head);
				var _g1 = 0;
				while(_g1 < exprs.length) {
					var e1 = exprs[_g1];
					++_g1;
					bb = this.blockElement(bb,e1);
				}
				var _this1 = this.localsStack;
				var k = _this1.head;
				if(k != null) {
					_this1.head = k.next;
				}
				return bb;
			}
			break;
		case 1:case 2:case 3:case 4:case 6:case 8:case 12:case 13:case 14:
			var r = this.value(bb,e);
			r.bb.elements.push(r.expr);
			return r.bb;
		case 5:
			var einitial = _g[4];
			var bind = _g[2];
			var type = this.typeType(_g[3],e.pos);
			switch(bind[1]) {
			case 0:
				var v = this.declareVar(bb,bind[2],type,e.pos);
				if(einitial != null) {
					var r1 = this.value(bb,einitial);
					bb = r1.bb;
					toylang_Typer.unifyThrow(r1.expr.type,type,einitial.pos);
					this.assignVar(bb,v,r1.expr,e.pos);
				}
				break;
			case 1:
				if(einitial == null) {
					throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.ComplexVariableBindingMustHaveInitialValue,e.pos));
				}
				var tmpVar = this.declareVar(bb,"tUnpack" + this.tmpCount++,type,e.pos);
				var r2 = this.value(bb,einitial);
				bb = r2.bb;
				this.assignVar(bb,tmpVar,r2.expr,e.pos);
				var loop = null;
				loop = function(expr,binds) {
					var i = 0;
					var _g2 = 0;
					while(_g2 < binds.length) {
						var bind1 = binds[_g2];
						++_g2;
						var elementType = toylang_Type.TMono(new toylang_Monomorph());
						var elementExpr = new toylang_TExpr(toylang_TExprKind.TTupleElement(expr,i),elementType,e.pos);
						switch(bind1[1]) {
						case 0:
							if(bind1[2] != "_") {
								_gthis.declareVar(bb,bind1[2],elementType,e.pos,elementExpr);
							}
							break;
						case 1:
							var tmpVar1 = _gthis.declareVar(bb,"tUnpack" + _gthis.tmpCount++,elementType,e.pos,elementExpr);
							loop(new toylang_TExpr(toylang_TExprKind.TLocal(tmpVar1),tmpVar1.type,e.pos),bind1[2]);
							break;
						}
						++i;
					}
				};
				loop(new toylang_TExpr(toylang_TExprKind.TLocal(tmpVar),tmpVar.type,e.pos),bind[2]);
				break;
			}
			return bb;
		case 7:
			return this.blockElement(bb,_g[2]);
		case 9:
			var eelse = _g[4];
			var econd = _g[2];
			var r3 = this.value(bb,econd);
			toylang_Typer.unifyThrow(r3.expr.type,this.tBool,econd.pos);
			r3.bb.elements.push(r3.expr);
			var bbNext = new toylang_BasicBlock();
			var bbThen = new toylang_BasicBlock();
			r3.bb.addEdge(bbThen,"then");
			this.block(bbThen,_g[3]).addEdge(bbNext,"next");
			var bbElse;
			if(eelse == null) {
				bbElse = null;
				r3.bb.addEdge(bbNext,"else");
			} else {
				bbElse = new toylang_BasicBlock();
				r3.bb.addEdge(bbElse,"else");
				this.block(bbElse,eelse).addEdge(bbNext,"next");
			}
			r3.bb.syntaxEdge = toylang_SyntaxEdge.SEBranch(bbThen,bbElse,bbNext);
			return bbNext;
		case 10:
			return bb;
		case 11:
			var econd1 = _g[2];
			var bbLoopHead = new toylang_BasicBlock();
			var r4 = this.value(bbLoopHead,econd1);
			toylang_Typer.unifyThrow(r4.expr.type,this.tBool,econd1.pos);
			r4.bb.elements.push(r4.expr);
			var bbNext1 = new toylang_BasicBlock();
			bbLoopHead.addEdge(bbNext1,"else");
			var bbLoopBody = new toylang_BasicBlock();
			bbLoopHead.addEdge(bbLoopBody,"then");
			var _this2 = this.loopStack;
			_this2.head = new haxe_ds_GenericCell(new toylang_LoopContext(bbLoopHead,bbNext1),_this2.head);
			var bbLoopBodyNext = this.block(bbLoopBody,_g[3]);
			var _this3 = this.loopStack;
			var k1 = _this3.head;
			if(k1 != null) {
				_this3.head = k1.next;
			}
			bbLoopBodyNext.addEdge(bbLoopHead,"loop");
			bb.addEdge(bbLoopHead,"next");
			bb.syntaxEdge = toylang_SyntaxEdge.SELoop(bbLoopHead,bbLoopBody,bbNext1);
			return bbNext1;
		case 15:
			var _this4 = this.loopStack;
			var loopCtx = _this4.head == null?null:_this4.head.elt;
			if(loopCtx == null) {
				throw new js__$Boot_HaxeError("break outside of loop");
			}
			bb.addEdge(loopCtx.next,"break");
			return this.bbUnreachable;
		case 16:
			var _this5 = this.loopStack;
			var loopCtx1 = _this5.head == null?null:_this5.head.elt;
			if(loopCtx1 == null) {
				throw new js__$Boot_HaxeError("continue outside of loop");
			}
			bb.addEdge(loopCtx1.head,"continue");
			return this.bbUnreachable;
		case 17:
			var rvalue = _g[2];
			if(rvalue == null) {
				bb.elements.push(new toylang_TExpr(toylang_TExprKind.TReturn(null),this.tVoid,e.pos));
			} else {
				var r5 = this.value(bb,rvalue);
				r5.bb.elements.push(new toylang_TExpr(toylang_TExprKind.TReturn(r5.expr),this.tVoid,e.pos));
			}
			return this.bbUnreachable;
		case 18:
			var tmpVar2 = this.declareVar(bb,"tmpSwitchSubject" + this.tmpCount++,toylang_Type.TMono(new toylang_Monomorph()),e.pos);
			var r6 = this.value(bb,_g[2]);
			this.assignVar(r6.bb,tmpVar2,r6.expr,e.pos);
			var dt = new toylang_Matcher(this).match(new toylang_TExpr(toylang_TExprKind.TLocal(tmpVar2),tmpVar2.type,e.pos),_g[3]);
			return this.pattern(r6.bb,dt,e.pos,$bind(this,this.blockElement));
		}
	}
	,pushLocals: function() {
		var locals = new haxe_ds_StringMap();
		var _this = this.localsStack;
		_this.head = new haxe_ds_GenericCell(locals,_this.head);
		return locals;
	}
	,popLocals: function() {
		var _this = this.localsStack;
		var k = _this.head;
		if(k != null) {
			_this.head = k.next;
		}
	}
	,typeClass: function(classDecl,name,pos) {
		var cls = new toylang_TClassDecl();
		var decl = toylang_TDecl.TDClass(cls);
		var _this = this.typeCache;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,decl);
		} else {
			_this.h[name] = decl;
		}
		cls.module = [];
		cls.name = name;
		cls.pos = pos;
		var fields = cls.fields = [];
		var _g = 0;
		var _g1 = classDecl.fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var _g2 = field.kind;
			switch(_g2[1]) {
			case 0:
				var isConst = field.modifiers.indexOf(toylang_FieldModifier.FMConst) != -1;
				var thisType = toylang_Type.TInst(cls);
				if(isConst) {
					thisType = toylang_Type.TConst(thisType);
				}
				var _this1 = this.thisStack;
				_this1.head = new haxe_ds_GenericCell(thisType,_this1.head);
				var tfun = this.typeFunctionDecl(_g2[2],field.pos);
				var _this2 = this.thisStack;
				var k = _this2.head;
				if(k != null) {
					_this2.head = k.next;
				}
				fields.push(new toylang_TClassField(field.name,toylang_TClassFieldKind.FMethod(isConst),toylang_Type.TFun(tfun.args,tfun.ret),field.pos));
				break;
			case 1:
				fields.push(new toylang_TClassField(field.name,toylang_TClassFieldKind.FVar,this.typeType(_g2[2],pos),field.pos));
				break;
			}
		}
		return decl;
	}
	,typeField: function(eobj,name,pos) {
		var cls;
		var isConst;
		var _g = toylang_Typer.follow(eobj.type);
		switch(_g[1]) {
		case 1:
			cls = _g[2];
			isConst = false;
			break;
		case 4:
			if(_g[2][1] == 1) {
				cls = _g[2][2];
				isConst = true;
			} else {
				throw new js__$Boot_HaxeError("todo");
			}
			break;
		default:
			throw new js__$Boot_HaxeError("todo");
		}
		var field = cls.getField(name);
		if(field == null) {
			throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.FieldNotFound(eobj.type,name),pos));
		}
		var type = field.type;
		var kind;
		switch(field.kind[1]) {
		case 0:
			if(isConst) {
				type = toylang_Type.TConst(type);
			}
			kind = toylang_TExprKind.TVarField(eobj,toylang_FieldAccess.FClassField(cls,field));
			break;
		case 1:
			kind = toylang_TExprKind.TMethodClosure(eobj,toylang_FieldAccess.FClassField(cls,field));
			break;
		}
		return new toylang_TExpr(kind,type,pos);
	}
	,call: function(bb,eobj,eargs,pos) {
		var r = this.value(bb,eobj);
		bb = r.bb;
		var eobj1 = r.expr;
		var typedArgs = [];
		var _g = 0;
		while(_g < eargs.length) {
			var e = eargs[_g];
			++_g;
			var tmpVarName = "callArg" + this.tmpCount++;
			var r1 = this.value(bb,e);
			bb = r1.bb;
			var v = this.declareVar(bb,tmpVarName,r1.expr.type,e.pos,r1.expr);
			typedArgs.push(new toylang_TExpr(toylang_TExprKind.TLocal(v),v.type,e.pos));
		}
		var returnType;
		var _g1 = toylang_Typer.follow(eobj1.type);
		switch(_g1[1]) {
		case 0:
			var m = _g1[2];
			returnType = toylang_Type.TMono(new toylang_Monomorph());
			var args = [];
			var _g11 = 0;
			var _g2 = typedArgs.length;
			while(_g11 < _g2) {
				var i = _g11++;
				args.push(new toylang_TFunctionArg(String.fromCharCode(97 + i),typedArgs[i].type));
			}
			m.resolve(toylang_Type.TFun(args,returnType));
			break;
		case 2:
			var args1 = _g1[2];
			if(args1.length > typedArgs.length) {
				throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.InsufficientArguments(args1.slice(typedArgs.length)),pos));
			} else if(args1.length < typedArgs.length) {
				throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.TooManyArguments,pos));
			}
			returnType = _g1[3];
			var _g12 = 0;
			var _g3 = args1.length;
			while(_g12 < _g3) {
				var i1 = _g12++;
				var expr = typedArgs[i1];
				toylang_Typer.unifyThrow(expr.type,args1[i1].type,expr.pos);
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.TypeIsNotCallable(_g1),pos));
		}
		var kind;
		var _g13 = eobj1.kind;
		if(_g13[1] == 5) {
			var f = _g13[3];
			var e1 = _g13[2];
			if(f[3].kind[1] == 1) {
				if(f[3].kind[2] == false) {
					if(toylang_Typer.follow(e1.type)[1] == 4) {
						throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.Immutable,pos));
					}
				}
			}
			kind = toylang_TExprKind.TMethodCall(e1,f,typedArgs);
		} else {
			kind = toylang_TExprKind.TCall(eobj1,typedArgs);
		}
		return { bb : bb, expr : new toylang_TExpr(kind,returnType,pos)};
	}
	,findLocal: function(name) {
		var map = this.localsStack.iterator();
		while(map.hasNext()) {
			var map1 = map.next();
			var v = __map_reserved[name] != null?map1.getReserved(name):map1.h[name];
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	,resolveIdent: function(ident,pos) {
		if(ident == "this") {
			var _this = this.thisStack;
			var t = _this.head == null?null:_this.head.elt;
			if(t != null) {
				return new toylang_TExpr(toylang_TExprKind.TThis,t,pos);
			}
		} else {
			var local = this.findLocal(ident);
			if(local != null) {
				return new toylang_TExpr(toylang_TExprKind.TLocal(local),local.type,pos);
			} else {
				var _this1 = this.thisStack;
				var t1 = _this1.head == null?null:_this1.head.elt;
				if(t1 != null) {
					return this.typeField(new toylang_TExpr(toylang_TExprKind.TThis,t1,pos),ident,pos);
				}
			}
		}
		throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.UnresolvedIdentifier(ident),pos));
	}
	,loadType: function(module,name,pos) {
		var key = module.concat([name]).join(".");
		var _this = this.typeCache;
		var type = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(type == null) {
			throw new js__$Boot_HaxeError(new toylang_TyperError(toylang_TyperErrorMessage.TypeNotFound(module,name),pos));
		}
		return type;
	}
	,__class__: toylang_Typer
};
var toylang_Unop = { __ename__ : true, __constructs__ : ["OpNot","OpNeg"] };
toylang_Unop.OpNot = ["OpNot",0];
toylang_Unop.OpNot.toString = $estr;
toylang_Unop.OpNot.__enum__ = toylang_Unop;
toylang_Unop.OpNeg = ["OpNeg",1];
toylang_Unop.OpNeg.toString = $estr;
toylang_Unop.OpNeg.__enum__ = toylang_Unop;
toylang_Unop.__empty_constructs__ = [toylang_Unop.OpNot,toylang_Unop.OpNeg];
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Web.code = window.document.getElementById("code");
Web.result = window.document.getElementById("result");
Web.error = window.document.getElementById("error");
Web.cfg = window.document.getElementById("cfg");
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
toylang_BasicBlock.nextId = 0;
toylang_Position.nullPos = new toylang_Position("",0,0);
toylang_Scanner.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = toylang_Keyword.__empty_constructs__;
		while(_g1 < _g2.length) {
			var kwd = _g2[_g1];
			++_g1;
			var key = kwd[0].substring(3).toLowerCase();
			if(__map_reserved[key] != null) {
				_g.setReserved(key,kwd);
			} else {
				_g.h[key] = kwd;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
